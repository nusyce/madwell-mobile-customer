name: Android Staging Build

on:
  push:
    branches:
      - develop
      - staging
      - deploy-to-playstore
  workflow_dispatch:  # Allows manual triggering

jobs:
  android:
    name: Android Staging Build
    environment: staging
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout source
        uses: actions/checkout@v3 
        with:
          fetch-depth: 1 # Shallow clone for faster checkout

      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.ENV_FILE }}
          EOL

      - name: Setup Flutter v3.29.1 (Dart â‰¥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get --no-precompile

      - name: Update google-services.json for staging
        run: |
          cat > android/app/google-services.json << 'EOL'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOL

      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
          
          # Create key.properties
          cat > android/key.properties << 'EOL'
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../upload-keystore.jks
          EOL

      - name: Build Android Staging APK
        run: |
          flutter build apk --flavor staging --dart-define=ENV=staging --split-per-abi
          
          # List the actual output files to verify paths
          echo "Checking APK output directory..."
          find build -name "*.apk" | sort
          
          # Create a directory listing for debugging
          ls -la build/app/outputs/flutter-apk/

      - name: Build Android Staging App Bundle
        run: |
          flutter build appbundle --flavor staging --dart-define=ENV=staging
          
          # List the actual output files to verify paths
          echo "Checking AAB output directory..."
          find build -name "*.aab" | sort
          
          # Create a directory listing for debugging
          ls -la build/app/outputs/bundle/

      - name: Find AAB for artifact upload
        id: find_aab
        run: |
          # Find the staging release AAB
          STAGING_AAB=$(find build -name "*staging*release*.aab" | head -n 1)
          
          # If no staging AAB is found, try to find any release AAB
          if [ -z "$STAGING_AAB" ]; then
            echo "No staging AAB found, looking for any release AAB..."
            STAGING_AAB=$(find build -name "*release*.aab" | head -n 1)
          fi
          
          # Exit if no AAB found
          if [ -z "$STAGING_AAB" ]; then
            echo "Error: No release AAB found!"
            exit 1
          fi
          
          echo "Found AAB: $STAGING_AAB"
          echo "aab_path=$STAGING_AAB" >> $GITHUB_OUTPUT

      - name: Upload Android Staging APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-staging-apk
          path: |
            build/app/outputs/flutter-apk/*staging*release*.apk
            build/app/outputs/apk/staging/release/*.apk
          retention-days: 3

      - name: Upload Android Staging AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-staging-aab
          path: ${{ steps.find_aab.outputs.aab_path }}
          retention-days: 3

      - name: Find APK for Firebase Distribution
        id: find_apk
        run: |
          # Find the arm64-v8a APK (preferred architecture)
          ARM64_APK=$(find build -name "*staging*arm64-v8a*release*.apk" | head -n 1)
          
          # If no arm64 APK is found, try to find any staging release APK
          if [ -z "$ARM64_APK" ]; then
            echo "No arm64 APK found, looking for any staging release APK..."
            ARM64_APK=$(find build -name "*staging*release*.apk" | head -n 1)
          fi
          
          # If still no APK found, try broader search
          if [ -z "$ARM64_APK" ]; then
            echo "No staging release APK found, looking for any release APK..."
            ARM64_APK=$(find build -name "*release*.apk" | head -n 1)
          fi
          
          # Exit if no APK found
          if [ -z "$ARM64_APK" ]; then
            echo "Error: No release APK found!"
            exit 1
          fi
          
          echo "Found APK: $ARM64_APK"
          echo "apk_path=$ARM64_APK" >> $GITHUB_OUTPUT

      - name: Deploy to Firebase App Distribution (APK)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: ${{ steps.find_apk.outputs.apk_path }}
          releaseNotes: "Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: Install required Ruby gems for Android
        run: |
          chmod +x android/setup_ruby_env.sh
          android/setup_ruby_env.sh

      - name: Deploy to Play Store (Internal Testing)
        env:
          SUPPLY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
        run: |
          cd android
          # Write JSON key to a file, properly handling quotes and formatting
          echo '${{ secrets.GOOGLE_PLAY_JSON_KEY }}' > service_account.json
          
          # Check if file exists and has content
          if [ -s service_account.json ]; then
            echo "Service account JSON file created successfully"
          else
            echo "Failed to create service account JSON file"
            exit 1
          fi
          
          # Run Fastlane with explicit bundler version
          bundle _2.3.27_ exec fastlane staging 