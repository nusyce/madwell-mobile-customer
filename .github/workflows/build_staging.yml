name: Build Staging App

on:
  push:
    branches:
      - develop
      - staging
      - deploy-to-playstore
  workflow_dispatch:  # Allows manual triggering

jobs:
  android:
    name: Android Staging Build
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout source
        uses: actions/checkout@v3 

      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.STAGING_ENV }}
          EOL
          

      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          cache: true

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Update google-services.json for staging
        run: |
          cat > android/app/google-services.json << 'EOL'
          ${{ secrets.STAGING_GOOGLE_SERVICES_JSON }}
          EOL

      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
          
          # Create key.properties
          cat > android/key.properties << 'EOL'
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../upload-keystore.jks
          EOL
          
          # Verify files exist
          echo "Verifying keystore and properties files:"
          ls -la android/upload-keystore.jks
          ls -la android/key.properties

      - name: Build Android Staging APK
        run: flutter build apk --flavor staging --dart-define=ENV=staging

      - name: Build Android Staging App Bundle
        run: flutter build appbundle --flavor staging --dart-define=ENV=staging
        
      - name: Upload Android Staging APK artifact
        uses: actions/upload-artifact@master
        with:
          name: android-staging-apk
          path: build/app/outputs/flutter-apk/app-staging-release.apk

      - name: Upload Android Staging AAB artifact
        uses: actions/upload-artifact@master
        with:
          name: android-staging-aab
          path: build/app/outputs/bundle/stagingRelease/app-staging-release.aab

      - name: Deploy to Firebase App Distribution (APK)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.STAGING_FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-staging-release.apk
          releaseNotes: "Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane gems
        run: |
          cd android
          bundle install

      - name: Deploy to Play Store (Internal Testing)
        env:
          SUPPLY_JSON_KEY: ${{ secrets.STAGING_GOOGLE_PLAY_JSON_KEY }}
        run: |
          cd android
          echo "$SUPPLY_JSON_KEY" > service_account.json
          fastlane staging

  ios:
    name: iOS Staging Build
    runs-on: macos-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      
      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.STAGING_ENV }}
          EOL


      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          cache: true

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Update GoogleService-Info.plist for staging
        run: |
          cat > ios/Runner/GoogleService-Info.plist << 'EOL'
          ${{ secrets.STAGING_GOOGLE_SERVICE_INFO_PLIST }}
          EOL

      - name: Create Xcode Scheme for Staging
        run: |
          cd ios
          # Create a new scheme for staging
          xcodebuild -scheme Runner -configuration Release -derivedDataPath build/
          # List available schemes
          xcodebuild -list

      - name: Build iOS
        run: |
          flutter build ios --release --dart-define=ENV=staging --no-codesign

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane gems
        run: |
          cd ios
          bundle install

      - name: Decode Apple certificates & profiles
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.STAGING_IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.STAGING_IOS_PROVISION_PROFILE_BASE64 }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.STAGING_IOS_KEYCHAIN_PASSWORD }}
        run: |
          mkdir -p ~/certs
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > ~/certs/cert.p12
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > ~/certs/profile.mobileprovision

      - name: Build & Sign IPA for TestFlight
        env:
          MATCH_PASSWORD: ${{ secrets.STAGING_MATCH_PASSWORD }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.STAGING_APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          fastlane build_staging

      - name: Upload iOS Staging IPA artifact
        uses: actions/upload-artifact@master
        with:
          name: ios-staging-ipa
          path: ios/build/Runner.ipa 