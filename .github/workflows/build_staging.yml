name: Build Staging App

on:
  push:
    branches:
      - develop
      - staging
      - setup-env-mode
  workflow_dispatch:  # Allows manual triggering

jobs:
  setup-env-files:
    name: Setup Environment Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Create staging env file
        run: |
          mkdir -p .env_examples
          cat > .env << 'EOL'
          # Staging Environment Configuration

          # API Keys
          GOOGLE_MAPS_API_KEY=${{ secrets.STAGING_GOOGLE_MAPS_API_KEY }}
          ADMOB_APP_ID=${{ secrets.STAGING_ADMOB_APP_ID }}

          # Firebase Configuration - Android
          FIREBASE_ANDROID_API_KEY=${{ secrets.STAGING_FIREBASE_ANDROID_API_KEY }}
          FIREBASE_ANDROID_APP_ID=${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}
          FIREBASE_ANDROID_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
          FIREBASE_ANDROID_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}

          # Firebase Configuration - iOS
          FIREBASE_IOS_API_KEY=${{ secrets.STAGING_FIREBASE_IOS_API_KEY }}
          FIREBASE_IOS_APP_ID=${{ secrets.STAGING_FIREBASE_IOS_APP_ID }}
          FIREBASE_IOS_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
          FIREBASE_IOS_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
          FIREBASE_IOS_CLIENT_ID=${{ secrets.STAGING_FIREBASE_IOS_CLIENT_ID }}
          FIREBASE_IOS_BUNDLE_ID=${{ secrets.STAGING_IOS_BUNDLE_ID }}

          # API Configuration
          API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}

          # App Configuration
          APP_NAME=Madwell Staging
          ANDROID_PACKAGE_NAME=app.maddwell.pro.customer.staging
          IOS_BUNDLE_ID=${{ secrets.STAGING_IOS_BUNDLE_ID }}
          EOL

      - name: Upload env files
        uses: actions/upload-artifact@v2
        with:
          name: env-files
          path: .env

  android:
    name: Android Staging Build
    runs-on: ubuntu-latest
    needs: setup-env-files

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Download env files
        uses: actions/download-artifact@v3
        with:
          name: env-files
          path: .

      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          cache: true

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Update google-services.json for staging
        run: |
          cat > android/app/google-services.json << 'EOL'
          ${{ secrets.STAGING_GOOGLE_SERVICES_JSON }}
          EOL

      - name: Build Android Staging APK
        run: flutter build apk --flavor staging --dart-define=ENV=staging

      - name: Build Android Staging App Bundle
        run: flutter build appbundle --flavor staging --dart-define=ENV=staging
        
      - name: Upload Android Staging APK artifact
        uses: actions/upload-artifact@v2
        with:
          name: android-staging-apk
          path: build/app/outputs/flutter-apk/app-staging-release.apk

      - name: Upload Android Staging AAB artifact
        uses: actions/upload-artifact@v2
        with:
          name: android-staging-aab
          path: build/app/outputs/bundle/stagingRelease/app-staging-release.aab

      - name: Deploy to Firebase App Distribution (APK)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.STAGING_FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-staging-release.apk
          releaseNotes: "Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane gems
        run: |
          cd android
          bundle install

      - name: Deploy to Play Store (Internal Testing)
        env:
          SUPPLY_JSON_KEY: ${{ secrets.STAGING_GOOGLE_PLAY_JSON_KEY }}
        run: |
          cd android
          echo "$SUPPLY_JSON_KEY" > service_account.json
          fastlane staging

  ios:
    name: iOS Staging Build
    runs-on: macos-latest
    needs: setup-env-files

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Download env files
        uses: actions/download-artifact@v3
        with:
          name: env-files
          path: .

      - name: Setup Flutter v3.29.3 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          cache: true

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Update GoogleService-Info.plist for staging
        run: |
          cat > ios/Runner/GoogleService-Info.plist << 'EOL'
          ${{ secrets.STAGING_GOOGLE_SERVICE_INFO_PLIST }}
          EOL

      - name: Build iOS (no codesign)
        run: flutter build ios --flavor staging --dart-define=ENV=staging --no-codesign

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane gems
        run: |
          cd ios
          bundle install

      - name: Decode Apple certificates & profiles
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.STAGING_IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.STAGING_IOS_PROVISION_PROFILE_BASE64 }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.STAGING_IOS_KEYCHAIN_PASSWORD }}
        run: |
          mkdir -p ~/certs
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > ~/certs/cert.p12
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > ~/certs/profile.mobileprovision

      - name: Build & Sign IPA for TestFlight
        env:
          MATCH_PASSWORD: ${{ secrets.STAGING_MATCH_PASSWORD }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.STAGING_APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          fastlane build_staging

      - name: Upload iOS Staging IPA artifact
        uses: actions/upload-artifact@v2
        with:
          name: ios-staging-ipa
          path: ios/build/Runner.ipa 