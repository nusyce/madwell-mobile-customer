name: Build Staging App

on:
  push:
    branches:
      - develop
      - staging
      - deploy-to-playstore
  workflow_dispatch:  # Allows manual triggering
  
jobs:
  android:
    name: Android Staging Build
    environment: staging
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 # Shallow clone for faster checkout

      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.ENV_FILE }}
          EOL
          
      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get --no-precompile

      - name: Update google-services.json for staging
        run: |
          cat > android/app/google-services.json << 'EOL'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOL

      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
          
          # Create key.properties
          cat > android/key.properties << 'EOL'
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../upload-keystore.jks
          EOL

      - name: Build Android Staging APK
        run: flutter build apk --flavor staging --dart-define=ENV=staging --split-per-abi

      - name: Build Android Staging App Bundle
        run: flutter build appbundle --flavor staging --dart-define=ENV=staging
        
      - name: Upload Android Staging APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-staging-apk
          path: build/app/outputs/flutter-apk/app-staging-release.apk
          retention-days: 3

      - name: Upload Android Staging AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-staging-aab
          path: build/app/outputs/bundle/stagingRelease/app-staging-release.aab
          retention-days: 3

      - name: Deploy to Firebase App Distribution (APK)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-staging-release.apk
          releaseNotes: "Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: Deploy to Play Store (Internal Testing)
        env:
          SUPPLY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
        run: |
          cd android
          # Write JSON key to a file, properly handling quotes and formatting
          echo '${{ secrets.GOOGLE_PLAY_JSON_KEY }}' > service_account.json
          
          # Check if file exists and has content
          if [ -s service_account.json ]; then
            echo "Service account JSON file created successfully"
          else
            echo "Failed to create service account JSON file"
            exit 1
          fi
          
          # Run Fastlane with bundle exec
          bundle exec fastlane staging

  ios:
    name: iOS Staging Build
    runs-on: macos-latest
    environment: staging
    timeout-minutes: 60

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 # Shallow clone for faster checkout
      
      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.ENV_FILE }}
          EOL

      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get --no-precompile

      - name: Fix app_settings dependency issue
        run: |
          # Pin app_settings to v5.1.0 to avoid Swift compiler error
          sed -i '' 's/app_settings: \^5.0.0/app_settings: 5.1.0/' pubspec.yaml
          # Update dependencies with the pinned version
          flutter pub get --no-precompile

      - name: Update GoogleService-Info.plist for staging
        run: |
          cat > ios/Runner/GoogleService-Info.plist << 'EOL'
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
          EOL

      - name: Update Podfile for Staging configuration
        run: |
          cd ios
          # Add Staging configuration to Podfile if not already added
          if ! grep -q "Staging" Podfile; then
            sed -i.bak '/# Prepare symlinks/i\
          # Add Staging configuration for CocoaPods\
          config.build_settings["POD_CONFIGURATION_BUILD_DIR"] = "${PODS_CONFIGURATION_BUILD_DIR}/#{config.name}"\
          elsif config.name == "Staging"\
          ' Podfile
          fi
          
          # Create Podfile.properties.json with Staging configuration
          cat > Podfile.properties.json << EOL
          {
            "use_frameworks!": true,
            "configs": {
              "Debug": {
                "use_frameworks!": true
              },
              "Release": {
                "use_frameworks!": true
              },
              "Staging": {
                "use_frameworks!": true
              }
            }
          }
          EOL
          
          # Create a sym-link of GoogleMaps.framework in the Frameworks folder
          mkdir -p Flutter/Flutter.framework/Modules
          echo "link:" > Flutter/Flutter.framework/Modules/module.modulemap

      - name: Import Certificates and Profiles
        env:
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PROVISION_PATH=$RUNNER_TEMP/build_profile.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Extract the profile info from mobileprovision file
          PROFILE_UUID=""
          PROFILE_NAME=""
          PROFILE_TEAM=""

          # Create variables to store the extracted profile info
          echo "Decoding provision profile..."
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > $PROVISION_PATH

          # Install provisioning profile
          echo "Installing provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROVISION_PATH ~/Library/MobileDevice/Provisioning\ Profiles/

          # Extract UUID using PlistBuddy or strings+grep
          PROFILE_UUID=$(security cms -D -i $PROVISION_PATH | plutil -extract UUID xml1 -o - - | plutil -p -)
          PROFILE_UUID=$(echo $PROFILE_UUID | sed 's/"//g')
          echo "Provisioning profile UUID: $PROFILE_UUID"
          
          # Extract provisioning profile name
          PROFILE_NAME=$(security cms -D -i $PROVISION_PATH | plutil -extract Name xml1 -o - - | plutil -p -)
          PROFILE_NAME=$(echo $PROFILE_NAME | sed 's/"//g')
          echo "Provisioning profile name: $PROFILE_NAME"
          
          # Extract team ID
          PROFILE_TEAM=$(security cms -D -i $PROVISION_PATH | plutil -extract TeamIdentifier.0 xml1 -o - - | plutil -p -)
          PROFILE_TEAM=$(echo $PROFILE_TEAM | sed 's/"//g')
          echo "Team ID: $PROFILE_TEAM"
          
          # Set environment variables for use in subsequent steps
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROFILE_TEAM=$PROFILE_TEAM" >> $GITHUB_ENV

          # Import certificate to keychain - fix for MAC verification failure
          echo "Creating keychain..."
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "Decoding distribution certificate..."
          # Use proper base64 decoding for certificate (this might vary by OS)
          # Try alternative base64 decode method to ensure proper binary format
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS base64 requires -D for decode
            echo "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 -D > $CERTIFICATE_PATH
          else
            # Linux and others typically use -d
            echo "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 -d > $CERTIFICATE_PATH
          fi

          # Verify certificate file exists and has size
          if [ ! -s "$CERTIFICATE_PATH" ]; then
            echo "Error: Certificate file is empty or doesn't exist"
            exit 1
          fi
          
          echo "Certificate size: $(wc -c < $CERTIFICATE_PATH) bytes"

          echo "Importing certificate to keychain..."
          # Import with more explicit options and error handling
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH || {
            echo "Certificate import failed. Trying alternative options..."
            # Try without specifying certificate type
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -k $KEYCHAIN_PATH
          }

          security list-keychain -d user -s $KEYCHAIN_PATH

          echo "Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Install CocoaPods
        run: |
          cd ios
          
          # Create better Podfile modifications for code signing
          cat > podfile_update.rb << 'EOL'
          #!/usr/bin/env ruby

          # Read the Podfile content
          podfile_path = 'Podfile'
          content = File.read(podfile_path)

          # Add Staging configuration duplication
          if !content.include?('installer.pods_project.build_configurations.each do |config|')
            content.gsub!(/post_install do \|installer\|/) do |match|
              match + "\n  # Create Staging configuration for all pods\n" +
                     "  installer.pods_project.build_configurations.each do |config|\n" +
                     "    if config.name == \"Release\"\n" +
                     "      staging_config = config.dup\n" +
                     "      staging_config.name = \"Staging\"\n" +
                     "      installer.pods_project.build_configurations << staging_config\n" +
                     "    end\n" +
                     "  end\n"
            end
          end

          # Add automatic code signing settings for all pod targets
          if !content.include?('config.build_settings.delete("PROVISIONING_PROFILE_SPECIFIER")')
            content.gsub!(/target\.build_configurations\.each do \|config\|/) do |match|
              match + "\n      # Set automatic code signing for all pods to avoid provisioning profile errors\n" +
                     "      config.build_settings[\"CODE_SIGN_STYLE\"] = \"Automatic\"\n" +
                     "      config.build_settings[\"DEVELOPMENT_TEAM\"] = \"\"\n" +
                     "      config.build_settings.delete(\"PROVISIONING_PROFILE_SPECIFIER\")\n" +
                     "      config.build_settings.delete(\"PROVISIONING_PROFILE\")\n" +
                     "      config.build_settings[\"CODE_SIGN_IDENTITY\"] = \"\"\n" +
                     "      config.build_settings[\"CODE_SIGN_IDENTITY[sdk=iphoneos*]\"] = \"\"\n" +
                     "      # Handle framework-specific settings\n" +
                     "      if target.product_type == \"com.apple.product-type.framework\"\n" +
                     "        config.build_settings[\"CODE_SIGNING_ALLOWED\"] = \"NO\"\n" +
                     "        config.build_settings[\"CODE_SIGNING_REQUIRED\"] = \"NO\"\n" +
                     "      end\n"
            end
          end

          # Write back the modified Podfile
          File.write(podfile_path, content)
          puts "Successfully updated Podfile with proper code signing configurations"
          EOL
          
          chmod +x podfile_update.rb
          ruby podfile_update.rb
          
          pod install --repo-update --clean-install
          
          # Fix Rive plugin issue with Staging configuration
          chmod +x rive_fix.rb
          ./rive_fix.rb
          
          # Create a comprehensive pod signing fix script
          cat > fix_pod_signing.rb << 'EOL'
          #!/usr/bin/env ruby
          require 'xcodeproj'
          
          project_path = 'Pods/Pods.xcodeproj'
          puts "Opening project at #{project_path}..."
          
          begin
            project = Xcodeproj::Project.open(project_path)
            
            # Step 1: Fix build configuration settings at the project level
            project.build_configurations.each do |config|
              puts "Setting automatic signing for project build configuration: #{config.name}"
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['DEVELOPMENT_TEAM'] = ''
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
            end
            
            # Step 2: Fix build configuration settings for all targets
            project.targets.each do |target|
              puts "Processing target: #{target.name}"
              
              # Iterate through all build configurations for the target
              target.build_configurations.each do |config|
                puts "  - Setting automatic signing for configuration: #{config.name}"
                
                # Ensure CODE_SIGN_STYLE is Automatic
                config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
                
                # Remove all provisioning profile settings
                config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
                config.build_settings.delete('PROVISIONING_PROFILE')
                config.build_settings.delete('DEVELOPMENT_TEAM')
                
                # Set CODE_SIGN_IDENTITY to empty for libraries that don't need signing
                config.build_settings['CODE_SIGN_IDENTITY'] = ''
                config.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = ''
                
                # Set PROVISIONING_PROFILE_SPECIFIER to empty
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''
                
                # Handle special cases for Frameworks vs normal targets
                is_framework = target.product_type == "com.apple.product-type.framework"
                if is_framework
                  # Frameworks should have these settings
                  config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                  config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
                  config.build_settings['SKIP_INSTALL'] = 'YES'
                end
                
                # Fix for the specific "does not support provisioning profiles" error
                if config.name == 'Staging'
                  # Apply extra fixes for staging configuration
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'NDEBUG=1' unless config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].include?('NDEBUG=1')
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'NS_BLOCK_ASSERTIONS=1' unless config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].include?('NS_BLOCK_ASSERTIONS=1')
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FLUTTER_RELEASE=1' unless config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].include?('FLUTTER_RELEASE=1')
                end
              end
            end
            
            # Save changes to the project
            project.save
            puts "Successfully updated project settings for all targets."
          rescue => e
            puts "Error updating project: #{e.message}"
            puts e.backtrace.join("\n")
            exit 1
          end
          EOL
          
          # Run the pod signing fix script
          ruby fix_pod_signing.rb

      - name: Create Xcode Scheme for Staging
        run: |
          cd ios
          # Install xcodeproj gem for Ruby script
          gem install xcodeproj
          
          # Create Staging.xcconfig with profile info from env variables
          mkdir -p Flutter
          echo "PRODUCT_BUNDLE_IDENTIFIER=app.madwell.pro.customer.staging" > Flutter/Staging.xcconfig
          echo "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" >> Flutter/Staging.xcconfig
          echo "DEVELOPMENT_TEAM=$PROFILE_TEAM" >> Flutter/Staging.xcconfig
          echo "CODE_SIGN_IDENTITY=Apple Distribution" >> Flutter/Staging.xcconfig
          echo "CODE_SIGN_STYLE=Manual" >> Flutter/Staging.xcconfig
          echo "APP_DISPLAY_NAME=Madwell Pro Staging" >> Flutter/Staging.xcconfig
          echo 'FLUTTER_TARGET=lib/main_staging.dart' >> Flutter/Staging.xcconfig
          echo 'FLUTTER_BUILD_MODE=Release' >> Flutter/Staging.xcconfig
          echo '#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"' >> Flutter/Staging.xcconfig
          echo '#include "Generated.xcconfig"' >> Flutter/Staging.xcconfig
          
          # Add Staging configuration to project
          ruby add_staging_config.rb
          
          # Update CocoaPods configurations to support Staging
          mkdir -p Pods/Target\ Support\ Files/Pods-Runner
          if [ -f "Pods/Target Support Files/Pods-Runner/Pods-Runner-frameworks-Release-input-files.xcfilelist" ]; then
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Release-input-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Staging-input-files.xcfilelist
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Release-output-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Staging-output-files.xcfilelist
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Release-input-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Staging-input-files.xcfilelist 2>/dev/null || true
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Release-output-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Staging-output-files.xcfilelist 2>/dev/null || true
            
            if [ -f "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig" ]; then
              cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner.release.xcconfig Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner.staging.xcconfig
            fi
          fi
          
          # Set explicit provisioning profile in project.pbxproj
          echo "Updating project.pbxproj with provisioning profile UUID: $PROFILE_UUID"
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"\";/PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_NAME\";/" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/PROVISIONING_PROFILE = \"\";/PROVISIONING_PROFILE = \"$PROFILE_UUID\";/" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"$PROFILE_TEAM\";/" Runner.xcodeproj/project.pbxproj
          
          # Fix code signing settings specifically for the main Runner target
          cat > fix_runner_signing.rb << 'EOL'
          #!/usr/bin/env ruby
          require 'xcodeproj'
          
          puts "Opening Runner project to update code signing settings..."
          project_path = 'Runner.xcodeproj'
          
          begin
            project = Xcodeproj::Project.open(project_path)
            
            # Find the Runner target
            runner_target = project.targets.find { |t| t.name == 'Runner' }
            
            if runner_target
              puts "Found Runner target, updating build configurations..."
              
              # Update each build configuration
              runner_target.build_configurations.each do |config|
                puts "Checking configuration: #{config.name}"
                
                # Only modify Staging configuration
                if config.name == 'Staging'
                  puts "Updating Staging configuration with manual code signing settings"
                  
                  # Set manual code signing for the main app
                  config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
                  
                  # Set the team ID from environment if available
                  team_id = ENV['PROFILE_TEAM']
                  config.build_settings['DEVELOPMENT_TEAM'] = team_id if team_id && !team_id.empty?
                  
                  # Set the provisioning profile specifier from environment if available
                  profile_name = ENV['PROFILE_NAME']
                  config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = profile_name if profile_name && !profile_name.empty?
                  
                  # Set the provisioning profile UUID from environment if available
                  profile_uuid = ENV['PROFILE_UUID']
                  config.build_settings['PROVISIONING_PROFILE'] = profile_uuid if profile_uuid && !profile_uuid.empty?
                  
                  # Set code sign identity
                  config.build_settings['CODE_SIGN_IDENTITY'] = 'Apple Distribution'
                  config.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = 'Apple Distribution'
                  
                  # Make sure the bundle ID is set correctly
                  config.build_settings['PRODUCT_BUNDLE_IDENTIFIER'] = 'app.madwell.pro.customer.staging'
                  
                  # Set other necessary flags for release build
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'NDEBUG=1' unless config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].include?('NDEBUG=1')
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FLUTTER_RELEASE=1' unless config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].include?('FLUTTER_RELEASE=1')
                end
              end
              
              # Save changes
              project.save
              puts "Successfully updated Runner.xcodeproj settings"
            else
              puts "Error: Could not find Runner target in project"
              exit 1
            end
          rescue => e
            puts "Error updating Runner project: #{e.message}"
            puts e.backtrace.join("\n")
            exit 1
          end
          EOL
          
          chmod +x fix_runner_signing.rb
          ruby fix_runner_signing.rb
          
          # Run the pod signing fix script again to ensure all targets are properly configured
          ruby fix_pod_signing.rb

      - name: Build iOS
        run: |
          # Build with manual signing using Staging configuration
          flutter build ios --release --no-codesign --dart-define=ENV=staging --config-only
          
          # Apply specific fixes for Rive plugin in Staging configuration
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Staging \
            -sdk iphoneos \
            -quiet \
            clean build \
            CODE_SIGNING_ALLOWED=NO \
            GCC_PREPROCESSOR_DEFINITIONS='$GCC_PREPROCESSOR_DEFINITIONS FLUTTER_RELEASE=1 NDEBUG=1'

      - name: Create Export Options
        run: |
          cat > ios/exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>app.madwell.pro.customer.staging</key>
                  <string>$PROFILE_NAME</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$PROFILE_TEAM</string>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOL

      - name: Archive and Export IPA
        run: |
          cd ios
          # Create a file for extra build settings
          cat > ExportOptions-supplements.plist << 'EOL'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>iCloudContainerEnvironment</key>
              <string>Production</string>
          </dict>
          </plist>
          EOL
          
          # Use manual code signing for archive with Staging configuration and optimization flags
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Staging \
            -archivePath build/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            DEVELOPMENT_TEAM="$PROFILE_TEAM" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            PRODUCT_BUNDLE_IDENTIFIER=app.madwell.pro.customer.staging \
            PODS_TARGET_CODE_SIGN_STYLE=Automatic \
            "EXCLUDED_ARCHS[sdk=iphonesimulator*]=" \
            "OTHER_CODE_SIGN_FLAGS=--deep" \
            -quiet \
            -skipPackagePluginValidation \
            -allowProvisioningUpdates \
            archive
          
          # Merge export options with supplements
          cat exportOptions.plist ExportOptions-supplements.plist > combined-options.plist
          
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist combined-options.plist \
            -exportPath build/ios \
            -allowProvisioningUpdates \
            -quiet

      - name: Upload iOS Staging IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-staging-ipa
          path: ios/build/ios/Runner.ipa
          retention-days: 3

      - name: Deploy to Firebase App Distribution (iOS)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: ios/build/ios/Runner.ipa
          releaseNotes: "iOS Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: Deploy to TestFlight
        run: |
          cd ios
          bundle exec fastlane build_staging 