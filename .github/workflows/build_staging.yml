name: Build Staging App

on:
  push:
    branches:
      - develop
      - staging
      - deploy-to-playstore
  workflow_dispatch:  # Allows manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android:
    name: Android Staging Build
    environment: staging
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 # Shallow clone for faster checkout

      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.ENV_FILE }}
          EOL
          
      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          cache: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            .pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get --no-precompile

      - name: Update google-services.json for staging
        run: |
          cat > android/app/google-services.json << 'EOL'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOL

      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
          
          # Create key.properties
          cat > android/key.properties << 'EOL'
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../upload-keystore.jks
          EOL

      - name: Build Android Staging APK
        run: flutter build apk --flavor staging --dart-define=ENV=staging --split-per-abi

      - name: Build Android Staging App Bundle
        run: flutter build appbundle --flavor staging --dart-define=ENV=staging
        
      - name: Upload Android Staging APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-staging-apk
          path: build/app/outputs/flutter-apk/app-staging-release.apk
          retention-days: 3

      - name: Upload Android Staging AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-staging-aab
          path: build/app/outputs/bundle/stagingRelease/app-staging-release.aab
          retention-days: 3

      - name: Deploy to Firebase App Distribution (APK)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-staging-release.apk
          releaseNotes: "Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true # Uses cache for gems

      - name: Deploy to Play Store (Internal Testing)
        env:
          SUPPLY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
        run: |
          cd android
          # Write JSON key to a file, properly handling quotes and formatting
          echo '${{ secrets.GOOGLE_PLAY_JSON_KEY }}' > service_account.json
          
          # Check if file exists and has content
          if [ -s service_account.json ]; then
            echo "Service account JSON file created successfully"
          else
            echo "Failed to create service account JSON file"
            exit 1
          fi
          
          # Run Fastlane with bundle exec
          bundle exec fastlane staging

  ios:
    name: iOS Staging Build
    runs-on: macos-latest
    environment: staging
    timeout-minutes: 60

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 # Shallow clone for faster checkout
      
      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.ENV_FILE }}
          EOL

      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
            .pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get --no-precompile

      - name: Fix app_settings dependency issue
        run: |
          # Pin app_settings to v5.1.0 to avoid Swift compiler error
          sed -i '' 's/app_settings: \^5.0.0/app_settings: 5.1.0/' pubspec.yaml
          # Update dependencies with the pinned version
          flutter pub get --no-precompile

      - name: Update GoogleService-Info.plist for staging
        run: |
          cat > ios/Runner/GoogleService-Info.plist << 'EOL'
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
          EOL

      - name: Update Podfile for Staging configuration
        run: |
          cd ios
          # Add Staging configuration to Podfile if not already added
          if ! grep -q "Staging" Podfile; then
            sed -i.bak '/# Prepare symlinks/i\
          # Add Staging configuration for CocoaPods\
          config.build_settings["POD_CONFIGURATION_BUILD_DIR"] = "${PODS_CONFIGURATION_BUILD_DIR}/#{config.name}"\
          elsif config.name == "Staging"\
          ' Podfile
          fi
          
          # Create Podfile.properties.json with Staging configuration
          cat > Podfile.properties.json << EOL
          {
            "use_frameworks!": true,
            "configs": {
              "Debug": {
                "use_frameworks!": true
              },
              "Release": {
                "use_frameworks!": true
              },
              "Staging": {
                "use_frameworks!": true
              }
            }
          }
          EOL
          
          # Create a sym-link of GoogleMaps.framework in the Frameworks folder
          mkdir -p Flutter/Flutter.framework/Modules
          echo "link:" > Flutter/Flutter.framework/Modules/module.modulemap

      - name: Install CocoaPods
        run: |
          cd ios
          
          # Update Podfile to configure proper code signing for pods in Staging configuration
          sed -i '' 's/post_install do |installer|/post_install do |installer|\n  # Create Staging configuration for all pods\n  installer.pods_project.build_configurations.each do |config|\n    if config.name == "Release"\n      staging_config = config.dup\n      staging_config.name = "Staging"\n      installer.pods_project.build_configurations << staging_config\n    end\n  end\n/' Podfile
          
          # Add code signing configuration settings for pods - directly edit the file instead of using sed
          ruby -e '
            podfile_content = File.read("Podfile")
            # Find the position to insert the code
            insert_pos = podfile_content.index("target.build_configurations.each do |config|")
            if insert_pos
              # Find the next line start position
              next_line_pos = podfile_content.index("\n", insert_pos) + 1
              # Insert our code after that line
              new_content = podfile_content[0...next_line_pos] + 
                "      # Set automatic code signing for all pods to avoid provisioning profile errors\n" +
                "      config.build_settings[\"CODE_SIGN_STYLE\"] = \"Automatic\"\n" +
                "      config.build_settings[\"DEVELOPMENT_TEAM\"] = \"\"\n" +
                "      config.build_settings.delete(\"PROVISIONING_PROFILE_SPECIFIER\")\n" +
                "      config.build_settings.delete(\"PROVISIONING_PROFILE\")\n" +
                podfile_content[next_line_pos..-1]
              File.write("Podfile", new_content)
              puts "Successfully updated Podfile"
            else
              puts "Warning: Could not find target.build_configurations in Podfile"
            end
          '
          
          pod install --repo-update --clean-install

      - name: Import Certificates and Profiles
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate to keychain
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > /tmp/certificate.p12
          
          # Verify certificate can be read with password
          if ! openssl pkcs12 -in /tmp/certificate.p12 -noout -passin pass:"$IOS_CERTIFICATE_PASSWORD" 2>/dev/null; then
            echo "Certificate password verification failed"
            exit 1
          fi
          
          # Extract certificate and private key
          openssl pkcs12 -in /tmp/certificate.p12 -clcerts -nokeys -out /tmp/cert.pem -passin pass:"$IOS_CERTIFICATE_PASSWORD"
          openssl pkcs12 -in /tmp/certificate.p12 -nocerts -out /tmp/key.pem -passin pass:"$IOS_CERTIFICATE_PASSWORD" -passout pass:temp123
          openssl rsa -in /tmp/key.pem -out /tmp/key_decrypted.pem -passin pass:temp123
          
          # Import certificate and key directly
          security import /tmp/cert.pem -k build.keychain -T /usr/bin/codesign
          security import /tmp/key_decrypted.pem -k build.keychain -T /usr/bin/codesign

          # Update keychain settings
          security set-keychain-settings -t 3600 -l build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_KEYCHAIN_PASSWORD" build.keychain

          # Create and copy provisioning profile
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Get the UUID from the profile
          PROFILE_UUID=$(grep UUID -A1 -a /tmp/profile.mobileprovision | grep -io "[-A-Z0-9]\{36\}")
          
          # Copy with UUID in filename
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
          
          # Display profile info
          security cms -D -i /tmp/profile.mobileprovision > /tmp/profile.plist
          PROFILE_NAME=$(plutil -extract Name raw /tmp/profile.plist)
          PROFILE_TEAM=$(plutil -extract TeamIdentifier.0 raw /tmp/profile.plist)
          PROFILE_APP_ID=$(plutil -extract Entitlements.application-identifier raw /tmp/profile.plist)
          
          # Save profile info for later use
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROFILE_TEAM=$PROFILE_TEAM" >> $GITHUB_ENV
          echo "PROFILE_APP_ID=$PROFILE_APP_ID" >> $GITHUB_ENV

      - name: Create Xcode Scheme for Staging
        run: |
          cd ios
          # Install xcodeproj gem for Ruby script
          gem install xcodeproj
          
          # Create Staging.xcconfig with profile info from env variables
          mkdir -p Flutter
          echo "PRODUCT_BUNDLE_IDENTIFIER=app.madwell.pro.customer.staging" > Flutter/Staging.xcconfig
          echo "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" >> Flutter/Staging.xcconfig
          echo "DEVELOPMENT_TEAM=$PROFILE_TEAM" >> Flutter/Staging.xcconfig
          echo "CODE_SIGN_IDENTITY=Apple Distribution" >> Flutter/Staging.xcconfig
          echo "CODE_SIGN_STYLE=Manual" >> Flutter/Staging.xcconfig
          echo "APP_DISPLAY_NAME=Madwell Pro Staging" >> Flutter/Staging.xcconfig
          echo 'FLUTTER_TARGET=lib/main_staging.dart' >> Flutter/Staging.xcconfig
          echo 'FLUTTER_BUILD_MODE=Release' >> Flutter/Staging.xcconfig
          echo '#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"' >> Flutter/Staging.xcconfig
          echo '#include "Generated.xcconfig"' >> Flutter/Staging.xcconfig
          
          # Add Staging configuration to project
          ruby add_staging_config.rb
          
          # Update CocoaPods configurations to support Staging
          mkdir -p Pods/Target\ Support\ Files/Pods-Runner
          if [ -f "Pods/Target Support Files/Pods-Runner/Pods-Runner-frameworks-Release-input-files.xcfilelist" ]; then
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Release-input-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Staging-input-files.xcfilelist
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Release-output-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-frameworks-Staging-output-files.xcfilelist
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Release-input-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Staging-input-files.xcfilelist 2>/dev/null || true
            cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Release-output-files.xcfilelist Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner-resources-Staging-output-files.xcfilelist 2>/dev/null || true
            
            if [ -f "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig" ]; then
              cp Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner.release.xcconfig Pods/Target\ Support\ Files/Pods-Runner/Pods-Runner.staging.xcconfig
            fi
          fi
          
          # Set explicit provisioning profile in project.pbxproj
          echo "Updating project.pbxproj with provisioning profile UUID: $PROFILE_UUID"
          sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"\";/PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_NAME\";/" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/PROVISIONING_PROFILE = \"\";/PROVISIONING_PROFILE = \"$PROFILE_UUID\";/" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"$PROFILE_TEAM\";/" Runner.xcodeproj/project.pbxproj
          
          # Create a Ruby script to set automatic code signing for all pod targets
          cat > fix_pod_signing.rb << 'EOL'
          require 'xcodeproj'
          
          # Open the Pods project
          project_path = 'Pods/Pods.xcodeproj'
          project = Xcodeproj::Project.open(project_path)
          
          # Set automatic code signing for all targets and all configurations
          project.targets.each do |target|
            target.build_configurations.each do |config|
              # Set automatic code signing
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              # Remove any manual signing settings
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
              # Ensure minimum iOS version is 14.0
              config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
            end
          end
          
          # Save changes
          project.save
          EOL
          
          # Run the Ruby script to fix pod signing
          ruby fix_pod_signing.rb

      - name: Build iOS
        run: |
          # Build with manual signing using Staging configuration
          flutter build ios --release --no-codesign --dart-define=ENV=staging

      - name: Create Export Options
        run: |
          cat > ios/exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>app.madwell.pro.customer.staging</key>
                  <string>$PROFILE_NAME</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$PROFILE_TEAM</string>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOL

      - name: Archive and Export IPA
        run: |
          cd ios
          # Create a file for extra build settings
          cat > ExportOptions-supplements.plist << 'EOL'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>iCloudContainerEnvironment</key>
              <string>Production</string>
          </dict>
          </plist>
          EOL
          
          # Use manual code signing for archive with Staging configuration and optimization flags
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Staging \
            -archivePath build/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            DEVELOPMENT_TEAM="$PROFILE_TEAM" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            PRODUCT_BUNDLE_IDENTIFIER=app.madwell.pro.customer.staging \
            PODS_TARGET_CODE_SIGN_STYLE=Automatic \
            "EXCLUDED_ARCHS[sdk=iphonesimulator*]=" \
            "OTHER_CODE_SIGN_FLAGS=--deep" \
            -quiet \
            -skipPackagePluginValidation \
            -allowProvisioningUpdates \
            archive
          
          # Merge export options with supplements
          cat exportOptions.plist ExportOptions-supplements.plist > combined-options.plist
          
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist combined-options.plist \
            -exportPath build/ios \
            -allowProvisioningUpdates \
            -quiet

      - name: Upload iOS Staging IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-staging-ipa
          path: ios/build/ios/Runner.ipa
          retention-days: 3

      - name: Deploy to Firebase App Distribution (iOS)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: ios/build/ios/Runner.ipa
          releaseNotes: "iOS Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true # Uses cache for gems

      - name: Deploy to TestFlight
        run: |
          cd ios
          bundle exec fastlane build_staging 