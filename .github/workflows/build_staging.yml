name: Build Staging App

on:
  push:
    branches:
      - develop
      - staging
      - deploy-to-playstore
  workflow_dispatch:  # Allows manual triggering

jobs:
  android:
    name: Android Staging Build
    environment: staging
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout source
        uses: actions/checkout@v3 

      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.ENV_FILE }}
          EOL
          

      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          cache: true

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Update google-services.json for staging
        run: |
          cat > android/app/google-services.json << 'EOL'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOL

      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
          
          # Create key.properties
          cat > android/key.properties << 'EOL'
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../upload-keystore.jks
          EOL
          
          # Verify files exist
          echo "Verifying keystore and properties files:"
          ls -la android/upload-keystore.jks
          ls -la android/key.properties

      - name: Build Android Staging APK
        run: flutter build apk --flavor staging --dart-define=ENV=staging

      - name: Build Android Staging App Bundle
        run: flutter build appbundle --flavor staging --dart-define=ENV=staging
        
      - name: Upload Android Staging APK artifact
        uses: actions/upload-artifact@master
        with:
          name: android-staging-apk
          path: build/app/outputs/flutter-apk/app-staging-release.apk

      - name: Upload Android Staging AAB artifact
        uses: actions/upload-artifact@master
        with:
          name: android-staging-aab
          path: build/app/outputs/bundle/stagingRelease/app-staging-release.aab

      - name: Deploy to Firebase App Distribution (APK)
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-staging-release.apk
          releaseNotes: "Staging build from GitHub Actions - commit ${{ github.sha }}"

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane gems
        run: |
          cd android
          bundle install

      - name: Deploy to Play Store (Internal Testing)
        env:
          SUPPLY_JSON_KEY: ${{ secrets.STAGING_GOOGLE_PLAY_JSON_KEY }}
        run: |
          cd android
          echo "$SUPPLY_JSON_KEY" > service_account.json
          fastlane staging

  ios:
    name: iOS Staging Build
    runs-on: macos-latest
    environment: staging

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      
      - name: Create staging env file
        run: |  
          cat > .env.staging << 'EOL'
          ${{ secrets.ENV_FILE }}
          EOL


      - name: Setup Flutter v3.29.1 (Dart ≥ 3.6.0)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          cache: true

      - name: Confirm Flutter & Dart versions
        run: flutter --version

      - name: Install Dart dependencies
        run: flutter pub get

      - name: Update GoogleService-Info.plist for staging
        run: |
          cat > ios/Runner/GoogleService-Info.plist << 'EOL'
          ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
          EOL

      - name: Install CocoaPods
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod install --repo-update

      - name: Import Certificates and Profiles
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain

          # Import certificate to keychain
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > /tmp/certificate.p12
          security import /tmp/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_KEYCHAIN_PASSWORD" build.keychain

          # Create and copy provisioning profile
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Create Xcode Scheme for Staging
        run: |
          cd ios
          xcodebuild -scheme Runner -configuration Release -derivedDataPath build/ -allowProvisioningUpdates

      - name: Build iOS
        run: |
          flutter build ios --release --dart-define=ENV=staging

      - name: Create Export Options
        run: |
          cat > ios/exportOptions.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>app.madwell.pro.customer.staging</key>
                  <string>Madwell Pro Customer Distribution</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOL

      - name: Archive and Export IPA
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            archive
          
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build/ios \
            -allowProvisioningUpdates

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane gems
        run: |
          cd ios
          bundle install

      - name: Decode Apple certificates & profiles
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          mkdir -p ~/certs
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > ~/certs/cert.p12
          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > ~/certs/profile.mobileprovision

      - name: Build & Sign IPA for TestFlight
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          cd ios
          fastlane build_staging

      - name: Upload iOS Staging IPA artifact
        uses: actions/upload-artifact@master
        with:
          name: ios-staging-ipa
          path: ios/build/Runner.ipa 