diff --git a/.env_examples/README.md b/.env_examples/README.md
new file mode 100644
index 0000000..e5e085c
--- /dev/null
+++ b/.env_examples/README.md
@@ -0,0 +1,31 @@
+# Environment Configuration Examples
+
+This directory contains example `.env` files for different environments:
+
+- `env.dev`: Example environment variables for the development environment
+- `env.staging`: Example environment variables for the staging environment
+- `env.prod`: Example environment variables for the production environment
+
+## Usage
+
+Copy these files to the project root and rename them:
+
+```bash
+# For development
+cp .env_examples/env.dev .env.dev
+
+# For staging
+cp .env_examples/env.staging .env.staging
+
+# For production
+cp .env_examples/env.prod .env.prod
+```
+
+## Important Security Note
+
+These examples contain API keys and other sensitive values that should be kept private in a real project. In a production environment:
+
+1. Never commit actual `.env` files to version control
+2. Use different API keys and Firebase projects for each environment
+3. Properly secure all API keys and credentials
+4. Consider using a secrets management service for sensitive values 
\ No newline at end of file
diff --git a/.github/workflows/README.md b/.github/workflows/README.md
new file mode 100644
index 0000000..169a3af
--- /dev/null
+++ b/.github/workflows/README.md
@@ -0,0 +1,86 @@
+# GitHub Actions Workflows
+
+This directory contains the GitHub Actions workflow configurations for CI/CD pipelines.
+
+## Workflows
+
+### 1. Build Staging App (`build_staging.yml`)
+
+Builds and deploys the staging version of the app for both Android and iOS.
+
+**Triggers:**
+- Push to `develop` branch
+- Push to `staging` branch
+- Manual trigger via workflow_dispatch
+
+**What it does:**
+- Sets up environment files
+- Builds Android APK and App Bundle with the `staging` flavor
+- Deploys Android APK to Firebase App Distribution for testing
+- Deploys Android App Bundle to Google Play Store's internal testing track
+- Builds iOS app with the `staging` flavor
+- Deploys iOS app to TestFlight
+
+### 2. Build & Deploy Production App (`deploy.yml`)
+
+Builds and deploys the production version of the app for both Android and iOS.
+
+**Triggers:**
+- Push to `main` branch
+- Tags that match `v*` pattern (e.g., v1.0.0)
+
+**What it does:**
+- Builds Android APK and App Bundle for production
+- Deploys Android App Bundle to Google Play Store's beta track
+- Builds iOS app for production
+- Deploys iOS app to TestFlight
+
+## Required Secrets
+
+For these workflows to function properly, you need to set up the following secrets in your GitHub repository:
+
+### For Staging:
+
+#### Firebase:
+- `FIREBASE_ANDROID_APP_ID`: Firebase Android app ID
+- `FIREBASE_SERVICE_ACCOUNT_JSON`: Firebase service account JSON for app distribution
+
+#### Google Play:
+- `GOOGLE_PLAY_JSON_KEY`: Google Play service account JSON key
+- `STAGING_GOOGLE_SERVICES_JSON`: Contents of the google-services.json file for staging
+
+#### iOS:
+- `STAGING_IOS_CERTIFICATE_BASE64`: iOS distribution certificate in base64
+- `STAGING_IOS_PROVISION_PROFILE_BASE64`: iOS provisioning profile in base64
+- `STAGING_IOS_KEYCHAIN_PASSWORD`: Password for temporary keychain
+- `STAGING_MATCH_PASSWORD`: Password for certificate encryption
+- `STAGING_APP_STORE_CONNECT_API_KEY`: App Store Connect API key content
+- `STAGING_APP_STORE_CONNECT_API_KEY_ID`: App Store Connect API key ID
+- `STAGING_APP_STORE_CONNECT_ISSUER_ID`: App Store Connect issuer ID
+- `STAGING_GOOGLE_SERVICE_INFO_PLIST`: Contents of the GoogleService-Info.plist file
+- `STAGING_IOS_BUNDLE_ID`: Bundle ID for iOS staging app
+
+#### Environment Variables:
+- `STAGING_GOOGLE_MAPS_API_KEY`: Google Maps API key
+- `STAGING_ADMOB_APP_ID`: AdMob app ID
+- `STAGING_FIREBASE_ANDROID_API_KEY`: Firebase Android API key
+- `STAGING_FIREBASE_ANDROID_APP_ID`: Firebase Android app ID
+- `STAGING_FIREBASE_PROJECT_ID`: Firebase project ID
+- `STAGING_FIREBASE_STORAGE_BUCKET`: Firebase storage bucket
+- `STAGING_FIREBASE_MESSAGING_SENDER_ID`: Firebase messaging sender ID
+- `STAGING_FIREBASE_IOS_API_KEY`: Firebase iOS API key
+- `STAGING_FIREBASE_IOS_APP_ID`: Firebase iOS app ID
+- `STAGING_FIREBASE_IOS_CLIENT_ID`: Firebase iOS client ID
+- `STAGING_API_BASE_URL`: Base URL for API
+
+### For Production:
+Similar set of secrets as above, but with production values.
+
+## Manual Workflow Trigger
+
+To manually trigger the staging build workflow:
+1. Go to Actions tab in your GitHub repository
+2. Select "Build Staging App" workflow
+3. Click "Run workflow"
+4. Choose the branch to run from
+5. Click "Run workflow" button 
\ No newline at end of file
diff --git a/.github/workflows/build_staging.yml b/.github/workflows/build_staging.yml
new file mode 100644
index 0000000..3e981c7
--- /dev/null
+++ b/.github/workflows/build_staging.yml
@@ -0,0 +1,238 @@
+name: Build Staging App
+
+on:
+  push:
+    branches:
+      - develop
+      - staging
+      - setup-env-mode
+  workflow_dispatch:  # Allows manual triggering
+
+jobs:
+  android:
+    name: Android Staging Build
+    runs-on: ubuntu-latest  
+
+    steps:
+      - name: Checkout source
+        uses: actions/checkout@v3 
+
+      - name: Create staging env file
+        run: |  
+          cat > .env << 'EOL'
+          # Staging Environment Configuration
+
+          # API Keys
+          GOOGLE_MAPS_API_KEY=${{ secrets.STAGING_GOOGLE_MAPS_API_KEY }}
+          ADMOB_APP_ID=${{ secrets.STAGING_ADMOB_APP_ID }}
+
+          # Firebase Configuration - Android
+          FIREBASE_ANDROID_API_KEY=${{ secrets.STAGING_FIREBASE_ANDROID_API_KEY }}
+          FIREBASE_ANDROID_APP_ID=${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}
+          FIREBASE_ANDROID_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
+          FIREBASE_ANDROID_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
+          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
+
+          # Firebase Configuration - iOS
+          FIREBASE_IOS_API_KEY=${{ secrets.STAGING_FIREBASE_IOS_API_KEY }}
+          FIREBASE_IOS_APP_ID=${{ secrets.STAGING_FIREBASE_IOS_APP_ID }}
+          FIREBASE_IOS_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
+          FIREBASE_IOS_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
+          FIREBASE_IOS_CLIENT_ID=${{ secrets.STAGING_FIREBASE_IOS_CLIENT_ID }}
+          FIREBASE_IOS_BUNDLE_ID=${{ secrets.STAGING_IOS_BUNDLE_ID }}
+
+          # API Configuration
+          API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}
+
+          # App Configuration
+          APP_NAME=Madwell Staging
+          ANDROID_PACKAGE_NAME=app.madwell.pro.customer.staging
+          IOS_BUNDLE_ID=${{ secrets.STAGING_IOS_BUNDLE_ID }}
+          EOL
+          
+
+      - name: Setup Flutter v3.29.1 (Dart â‰¥ 3.6.0)
+        uses: subosito/flutter-action@v2
+        with:
+          flutter-version: '3.29.1'
+          cache: true
+
+      - name: Confirm Flutter & Dart versions
+        run: flutter --version
+
+      - name: Install Dart dependencies
+        run: flutter pub get
+
+      - name: Update google-services.json for staging
+        run: |
+          cat > android/app/google-services.json << 'EOL'
+          ${{ secrets.STAGING_GOOGLE_SERVICES_JSON }}
+          EOL
+
+      - name: Setup Android signing
+        run: |
+          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
+          
+          # Create key.properties
+          cat > android/key.properties << 'EOL'
+          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
+          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
+          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
+          storeFile=../upload-keystore.jks
+          EOL
+          
+          # Verify files exist
+          echo "Verifying keystore and properties files:"
+          ls -la android/upload-keystore.jks
+          ls -la android/key.properties
+
+      - name: Build Android Staging APK
+        run: flutter build apk --flavor staging --dart-define=ENV=staging
+
+      - name: Build Android Staging App Bundle
+        run: flutter build appbundle --flavor staging --dart-define=ENV=staging
+        
+      - name: Upload Android Staging APK artifact
+        uses: actions/upload-artifact@master
+        with:
+          name: android-staging-apk
+          path: build/app/outputs/flutter-apk/app-staging-release.apk
+
+      - name: Upload Android Staging AAB artifact
+        uses: actions/upload-artifact@master
+        with:
+          name: android-staging-aab
+          path: build/app/outputs/bundle/stagingRelease/app-staging-release.aab
+
+      - name: Deploy to Firebase App Distribution (APK)
+        uses: wzieba/Firebase-Distribution-Github-Action@v1
+        with:
+          appId: ${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}
+          serviceCredentialsFileContent: ${{ secrets.STAGING_FIREBASE_SERVICE_ACCOUNT_JSON }}
+          groups: testers
+          file: build/app/outputs/flutter-apk/app-staging-release.apk
+          releaseNotes: "Staging build from GitHub Actions - commit ${{ github.sha }}"
+
+      - name: Setup Ruby for Fastlane
+        uses: ruby/setup-ruby@v1
+        with:
+          ruby-version: '3.1'
+
+      - name: Install Fastlane gems
+        run: |
+          cd android
+          bundle install
+
+      - name: Deploy to Play Store (Internal Testing)
+        env:
+          SUPPLY_JSON_KEY: ${{ secrets.STAGING_GOOGLE_PLAY_JSON_KEY }}
+        run: |
+          cd android
+          echo "$SUPPLY_JSON_KEY" > service_account.json
+          fastlane staging
+
+  ios:
+    name: iOS Staging Build
+    runs-on: macos-latest
+    needs: android
+
+    steps:
+      - name: Checkout source
+        uses: actions/checkout@v3
+      
+      - name: Create staging env file
+        run: |  
+          cat > .env << 'EOL'
+          # Staging Environment Configuration
+
+          # API Keys
+          GOOGLE_MAPS_API_KEY=${{ secrets.STAGING_GOOGLE_MAPS_API_KEY }}
+          ADMOB_APP_ID=${{ secrets.STAGING_ADMOB_APP_ID }}
+
+          # Firebase Configuration - Android
+          FIREBASE_ANDROID_API_KEY=${{ secrets.STAGING_FIREBASE_ANDROID_API_KEY }}
+          FIREBASE_ANDROID_APP_ID=${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}
+          FIREBASE_ANDROID_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
+          FIREBASE_ANDROID_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
+          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
+
+          # Firebase Configuration - iOS
+          FIREBASE_IOS_API_KEY=${{ secrets.STAGING_FIREBASE_IOS_API_KEY }}
+          FIREBASE_IOS_APP_ID=${{ secrets.STAGING_FIREBASE_IOS_APP_ID }}
+          FIREBASE_IOS_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
+          FIREBASE_IOS_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
+          FIREBASE_IOS_CLIENT_ID=${{ secrets.STAGING_FIREBASE_IOS_CLIENT_ID }}
+
+          # API Configuration
+          API_BASE_URL=${{ secrets.STAGING_API_BASE_URL }}
+
+          # App Configuration
+          APP_NAME=Madwell Staging
+          ANDROID_PACKAGE_NAME=app.madwell.pro.customer.staging
+          IOS_BUNDLE_ID=${{ secrets.STAGING_IOS_BUNDLE_ID }}
+          EOL
+
+
+      - name: Setup Flutter v3.29.1 (Dart â‰¥ 3.6.0)
+        uses: subosito/flutter-action@v2
+        with:
+          flutter-version: '3.29.1'
+          cache: true
+
+      - name: Confirm Flutter & Dart versions
+        run: flutter --version
+
+      - name: Install Dart dependencies
+        run: flutter pub get
+
+      - name: Update GoogleService-Info.plist for staging
+        run: |
+          cat > ios/Runner/GoogleService-Info.plist << 'EOL'
+          ${{ secrets.STAGING_GOOGLE_SERVICE_INFO_PLIST }}
+          EOL
+
+      - name: Create Xcode Scheme for Staging
+        run: |
+          cd ios
+          # Create a new scheme for staging
+          xcodebuild -scheme Runner -configuration Release -derivedDataPath build/
+          # List available schemes
+          xcodebuild -list
+
+      - name: Build iOS
+        run: |
+          flutter build ios --release --dart-define=ENV=staging --no-codesign
+
+      - name: Setup Ruby for Fastlane
+        uses: ruby/setup-ruby@v1
+        with:
+          ruby-version: '3.1'
+
+      - name: Install Fastlane gems
+        run: |
+          cd ios
+          bundle install
+
+      - name: Decode Apple certificates & profiles
+        env:
+          IOS_CERTIFICATE_BASE64: ${{ secrets.STAGING_IOS_CERTIFICATE_BASE64 }}
+          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.STAGING_IOS_PROVISION_PROFILE_BASE64 }}
+          IOS_KEYCHAIN_PASSWORD: ${{ secrets.STAGING_IOS_KEYCHAIN_PASSWORD }}
+        run: |
+          mkdir -p ~/certs
+          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > ~/certs/cert.p12
+          echo "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > ~/certs/profile.mobileprovision
+
+      - name: Build & Sign IPA for TestFlight
+        env:
+          MATCH_PASSWORD: ${{ secrets.STAGING_MATCH_PASSWORD }}
+          APP_STORE_CONNECT_API_KEY: ${{ secrets.STAGING_APP_STORE_CONNECT_API_KEY }}
+        run: |
+          cd ios
+          fastlane build_staging
+
+      - name: Upload iOS Staging IPA artifact
+        uses: actions/upload-artifact@master
+        with:
+          name: ios-staging-ipa
+          path: ios/build/Runner.ipa 
\ No newline at end of file
diff --git a/.github/workflows/deploy.yml b/.github/workflows/deploy.yml
index 54c963b..872a705 100644
--- a/.github/workflows/deploy.yml
+++ b/.github/workflows/deploy.yml
@@ -35,7 +35,7 @@ jobs:
         run: flutter build appbundle --release
         
       - name: Upload Android AAB artifact
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@master
         with:
           name: android-aab
           path: build/app/outputs/bundle/release/app-release.aab
@@ -44,7 +44,7 @@ jobs:
         run: flutter build apk --release
 
       - name: Upload Android APK artifact
-        uses: actions/upload-artifact@v3
+        uses: actions/upload-artifact@master
         with:
           name: android-apk
           path: build/app/outputs/flutter-apk/app-release.apk
diff --git a/.gitignore b/.gitignore
index 8a00072..17c3700 100644
--- a/.gitignore
+++ b/.gitignore
@@ -132,4 +132,14 @@ app.*.symbols
 
 # FVM Version Cache
 .fvm/
-.fvmrc
\ No newline at end of file
+.fvmrc
+
+# Add .env files
+.env
+.env.*
+!.env.template.txt
+
+# Add .env_examples files
+.env_examples
+.env_examples.*
+!.env_examples.template.txt
\ No newline at end of file
diff --git a/README.md b/README.md
index a81acf6..9a9e2a5 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,141 @@
+# Madwell Mobile Customer App
+
+## Environment Setup
+
+This project supports multiple environments:
+- Development (dev)
+- Staging (staging)
+- Production (prod)
+
+Each environment has its own configuration, package name, and app icon.
+
+## Environment Configuration
+
+### Setup
+
+1. Copy the environment example files to the project root:
+
+```bash
+# For development
+cp .env_examples/env.dev .env.dev
+
+# For staging 
+cp .env_examples/env.staging .env.staging
+
+# For production
+cp .env_examples/env.prod .env.prod
+```
+
+2. Update the values in each `.env` file with the appropriate API keys and settings.
+
+### Running the App
+
+To run the app in a specific environment:
+
+```bash
+# Development
+flutter run --dart-define=ENV=dev --flavor dev
+
+# Staging
+flutter run --dart-define=ENV=staging --flavor staging
+
+# Production
+flutter run --dart-define=ENV=prod --flavor prod
+```
+
+### Building the App
+
+To build the app for a specific environment:
+
+```bash
+# Development APK
+flutter build apk --dart-define=ENV=dev --flavor dev
+
+# Staging APK
+flutter build apk --dart-define=ENV=staging --flavor staging
+
+# Production APK
+flutter build apk --dart-define=ENV=prod --flavor prod
+
+# Development App Bundle
+flutter build appbundle --dart-define=ENV=dev --flavor dev
+
+# Staging App Bundle
+flutter build appbundle --dart-define=ENV=staging --flavor staging
+
+# Production App Bundle
+flutter build appbundle --dart-define=ENV=prod --flavor prod
+```
+
+### Testing your setup
+
+You can run the environment test script to verify your setup:
+
+```bash
+./test_environment.sh
+```
+
+This script will help you run the app with the correct environment configuration.
+
+### App Icons
+
+The app uses different icons for each environment. To generate them:
+
+```bash
+# Generate icons for development
+flutter pub run flutter_launcher_icons -f flutter_launcher_icons-dev.yaml
+
+# Generate icons for staging
+flutter pub run flutter_launcher_icons -f flutter_launcher_icons-staging.yaml
+
+# Generate icons for production
+flutter pub run flutter_launcher_icons -f flutter_launcher_icons-prod.yaml
+```
+
+Make sure to place the appropriate icon files in the following locations:
+- `assets/images/branding/app_icon_dev.png`
+- `assets/images/branding/app_icon_foreground_dev.png`
+- `assets/images/branding/app_icon_staging.png`
+- `assets/images/branding/app_icon_foreground_staging.png`
+- `assets/images/branding/app_icon.png`
+- `assets/images/branding/app_icon_foreground.png`
+
+## Firebase Configuration
+
+Firebase configuration is managed through environment-specific settings.
+
+To change Firebase projects for each environment, update the configuration in the appropriate files:
+- `lib/config/dev_config.dart` (Development)
+- `lib/config/staging_config.dart` (Staging)
+- `lib/config/prod_config.dart` (Production)
+
+## Key Files
+
+The environment configuration is managed by the following files:
+
+- `lib/config/environment_config.dart`: Main configuration class
+- `lib/config/dev_config.dart`: Development environment settings
+- `lib/config/staging_config.dart`: Staging environment settings
+- `lib/config/prod_config.dart`: Production environment settings
+- `lib/config/env_reader.dart`: Environment file reader
+- `lib/config/firebase_options_helper.dart`: Firebase options helper
+- `lib/utils/environment_checker.dart`: Utility to check environment setup
+
+## API Keys and Security
+
+The environment setup securely manages:
+1. Firebase API keys
+2. Google Maps API keys
+3. AdMob App IDs
+4. Package/Bundle IDs
+5. API base URLs
+
+For maximum security:
+- Keep `.env` files out of version control (add to `.gitignore`)
+- Use different API keys for each environment
+- Restrict API keys in the respective services (Google Cloud Console, Firebase Console)
+- Follow best practices for mobile API key security
+
 ### Table of contents
 [System
 requirements] (#system-requirements)
diff --git a/android/Gemfile b/android/Gemfile
new file mode 100644
index 0000000..27a0353
--- /dev/null
+++ b/android/Gemfile
@@ -0,0 +1,3 @@
+source "https://rubygems.org"
+ 
+gem "fastlane" 
\ No newline at end of file
diff --git a/android/app/build.gradle b/android/app/build.gradle
index 2cc15e8..2570d17 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -65,6 +65,27 @@ android {
         }
     }
 
+    flavorDimensions "environment"
+    
+    productFlavors {
+        dev {
+            dimension "environment"
+            applicationIdSuffix ".dev"
+            versionNameSuffix "-dev"
+        }
+        
+        staging {
+            dimension "environment"
+            applicationIdSuffix ".staging"
+            versionNameSuffix "-staging"
+        }
+        
+        prod {
+            dimension "environment"
+            // No applicationIdSuffix for production
+        }
+    }
+
     buildTypes {
         release {
             signingConfig signingConfigs.release
diff --git a/android/app/google-services.json b/android/app/google-services.json
index fe0b007..9f6770c 100644
--- a/android/app/google-services.json
+++ b/android/app/google-services.json
@@ -33,6 +33,64 @@
           ]
         }
       }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:213795493196:android:9202f052770d061c1cebe9",
+        "android_client_info": {
+          "package_name": "app.madwell.pro.customer.dev"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "213795493196-8t2umgtnv1l63om11f2to1nsupftaelk.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyAYMvWe1BHcdPBy_g2mnwU90qzPUYCnF6E"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "213795493196-8t2umgtnv1l63om11f2to1nsupftaelk.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:213795493196:android:9202f052770d061c1cebe9",
+        "android_client_info": {
+          "package_name": "app.madwell.pro.customer.staging"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "213795493196-8t2umgtnv1l63om11f2to1nsupftaelk.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyAYMvWe1BHcdPBy_g2mnwU90qzPUYCnF6E"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "213795493196-8t2umgtnv1l63om11f2to1nsupftaelk.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
     }
   ],
   "configuration_version": "1"
diff --git a/android/app/src/dev/res/values/strings.xml b/android/app/src/dev/res/values/strings.xml
new file mode 100644
index 0000000..fe6e9a4
--- /dev/null
+++ b/android/app/src/dev/res/values/strings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Madwell Dev</string>
+</resources> 
\ No newline at end of file
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
index feaa2b0..565bb75 100644
--- a/android/app/src/main/AndroidManifest.xml
+++ b/android/app/src/main/AndroidManifest.xml
@@ -14,7 +14,7 @@
         android:allowBackup="false"
         android:fullBackupOnly="false"
         android:icon="@mipmap/ic_launcher"
-        android:label="eDemand"
+        android:label="@string/app_name"
         android:requestLegacyExternalStorage="true"
         android:usesCleartextTraffic="true"
         android:extractNativeLibs="true">
@@ -27,7 +27,7 @@
 
         <meta-data
             android:name="com.google.android.geo.API_KEY"
-            android:value="YOUR_API_KEY_HERE" />
+            android:value="AIzaSyCwfukVGxK_naIuOCyp5q_pLwbyi4Hbprw" />
         <meta-data
             android:name="com.google.firebase.messaging.default_notification_channel_id"
             android:value="basic_channel" />
diff --git a/android/app/src/prod/res/values/strings.xml b/android/app/src/prod/res/values/strings.xml
new file mode 100644
index 0000000..0fa7b03
--- /dev/null
+++ b/android/app/src/prod/res/values/strings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Madwell</string>
+</resources> 
\ No newline at end of file
diff --git a/android/app/src/staging/res/values/strings.xml b/android/app/src/staging/res/values/strings.xml
new file mode 100644
index 0000000..ccef7d0
--- /dev/null
+++ b/android/app/src/staging/res/values/strings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Madwell Staging</string>
+</resources> 
\ No newline at end of file
diff --git a/android/fastlane/Appfile b/android/fastlane/Appfile
new file mode 100644
index 0000000..ed09e36
--- /dev/null
+++ b/android/fastlane/Appfile
@@ -0,0 +1,2 @@
+json_key_file("service_account.json") # Path to the json secret file - Follow https://docs.fastlane.tools/actions/supply/#setup to get one
+package_name("app.madwell.pro.customer") # e.g. com.krausefx.app 
\ No newline at end of file
diff --git a/android/fastlane/Fastfile b/android/fastlane/Fastfile
new file mode 100644
index 0000000..258cf9f
--- /dev/null
+++ b/android/fastlane/Fastfile
@@ -0,0 +1,37 @@
+default_platform(:android)
+
+platform :android do
+  desc "Deploy staging app to internal test track"
+  lane :staging do
+    validate_play_store_json_key(
+      json_key: "service_account.json"
+    )
+    
+    upload_to_play_store(
+      track: 'internal',
+      aab: '../build/app/outputs/bundle/stagingRelease/app-staging-release.aab',
+      skip_upload_metadata: true,
+      skip_upload_images: true,
+      skip_upload_screenshots: true,
+      release_status: "draft",
+      package_name: "app.madwell.pro.customer.staging"
+    )
+  end
+
+  desc "Deploy production app to beta track"
+  lane :beta do
+    validate_play_store_json_key(
+      json_key: "service_account.json"
+    )
+    
+    upload_to_play_store(
+      track: 'beta',
+      aab: '../build/app/outputs/bundle/release/app-release.aab',
+      skip_upload_metadata: true,
+      skip_upload_images: true,
+      skip_upload_screenshots: true,
+      release_status: "draft",
+      package_name: "app.madwell.pro.customer"
+    )
+  end
+end 
\ No newline at end of file
diff --git a/flutter_launcher_icons-dev.yaml b/flutter_launcher_icons-dev.yaml
new file mode 100644
index 0000000..bd0c7cd
--- /dev/null
+++ b/flutter_launcher_icons-dev.yaml
@@ -0,0 +1,14 @@
+flutter_launcher_icons:
+  android: true
+  ios: true
+  image_path: "assets/images/branding/app_icon_dev.png"
+  adaptive_icon_background: "#FFFFFF"
+  adaptive_icon_foreground: "assets/images/branding/app_icon_foreground_dev.png"
+  min_sdk_android: 21
+  remove_alpha_ios: true
+  web:
+    generate: false
+  windows:
+    generate: false
+  macos:
+    generate: false 
\ No newline at end of file
diff --git a/flutter_launcher_icons-prod.yaml b/flutter_launcher_icons-prod.yaml
new file mode 100644
index 0000000..a70977e
--- /dev/null
+++ b/flutter_launcher_icons-prod.yaml
@@ -0,0 +1,14 @@
+flutter_launcher_icons:
+  android: true
+  ios: true
+  image_path: "assets/images/branding/app_icon.png"
+  adaptive_icon_background: "#FFFFFF"
+  adaptive_icon_foreground: "assets/images/branding/app_icon_foreground.png"
+  min_sdk_android: 21
+  remove_alpha_ios: true
+  web:
+    generate: false
+  windows:
+    generate: false
+  macos:
+    generate: false 
\ No newline at end of file
diff --git a/flutter_launcher_icons-staging.yaml b/flutter_launcher_icons-staging.yaml
new file mode 100644
index 0000000..a2c6d11
--- /dev/null
+++ b/flutter_launcher_icons-staging.yaml
@@ -0,0 +1,14 @@
+flutter_launcher_icons:
+  android: true
+  ios: true
+  image_path: "assets/images/branding/app_icon_staging.png"
+  adaptive_icon_background: "#FFFFFF"
+  adaptive_icon_foreground: "assets/images/branding/app_icon_foreground_staging.png"
+  min_sdk_android: 21
+  remove_alpha_ios: true
+  web:
+    generate: false
+  windows:
+    generate: false
+  macos:
+    generate: false 
\ No newline at end of file
diff --git a/ios/Gemfile b/ios/Gemfile
new file mode 100644
index 0000000..7c0a274
--- /dev/null
+++ b/ios/Gemfile
@@ -0,0 +1,4 @@
+source "https://rubygems.org"
+ 
+gem "fastlane"
+gem "cocoapods" 
\ No newline at end of file
diff --git a/ios/Runner.xcodeproj/project.pbxproj b/ios/Runner.xcodeproj/project.pbxproj
index 5936150..a237b09 100644
--- a/ios/Runner.xcodeproj/project.pbxproj
+++ b/ios/Runner.xcodeproj/project.pbxproj
@@ -408,7 +408,7 @@
 					"@executable_path/Frameworks",
 				);
 				MARKETING_VERSION = 3.0.0;
-				PRODUCT_BUNDLE_IDENTIFIER = wrteam.edemand.customer.eDemand;
+				PRODUCT_BUNDLE_IDENTIFIER = app.madwell.pro.customer;
 				PRODUCT_NAME = "$(TARGET_NAME)";
 				PROVISIONING_PROFILE_SPECIFIER = "";
 				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
@@ -549,7 +549,7 @@
 					"@executable_path/Frameworks",
 				);
 				MARKETING_VERSION = 3.0.0;
-				PRODUCT_BUNDLE_IDENTIFIER = wrteam.edemand.customer.eDemand;
+				PRODUCT_BUNDLE_IDENTIFIER = app.madwell.pro.customer;
 				PRODUCT_NAME = "$(TARGET_NAME)";
 				PROVISIONING_PROFILE_SPECIFIER = "";
 				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
@@ -584,7 +584,7 @@
 					"@executable_path/Frameworks",
 				);
 				MARKETING_VERSION = 3.0.0;
-				PRODUCT_BUNDLE_IDENTIFIER = wrteam.edemand.customer.eDemand;
+				PRODUCT_BUNDLE_IDENTIFIER = app.madwell.pro.customer;
 				PRODUCT_NAME = "$(TARGET_NAME)";
 				PROVISIONING_PROFILE_SPECIFIER = "";
 				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
diff --git a/ios/Runner/GoogleService-Info.plist b/ios/Runner/GoogleService-Info.plist
index 96d8a50..b375db8 100644
--- a/ios/Runner/GoogleService-Info.plist
+++ b/ios/Runner/GoogleService-Info.plist
@@ -15,7 +15,7 @@
 	<key>PLIST_VERSION</key>
 	<string>1</string>
 	<key>BUNDLE_ID</key>
-	<string>wrteam.edemand.customer.eDemand</string>
+	<string>app.madwell.pro.customer</string>
 	<key>PROJECT_ID</key>
 	<string>edemand-79907</string>
 	<key>STORAGE_BUCKET</key>
diff --git a/ios/fastlane/Appfile b/ios/fastlane/Appfile
new file mode 100644
index 0000000..5073408
--- /dev/null
+++ b/ios/fastlane/Appfile
@@ -0,0 +1,5 @@
+app_identifier(ENV["APP_IDENTIFIER"] || "app.madwell.pro.customer") # The bundle identifier of your app
+apple_id(ENV["APPLE_ID"]) # Your Apple Developer Portal username
+
+itc_team_id(ENV["ITC_TEAM_ID"]) # App Store Connect Team ID
+team_id(ENV["TEAM_ID"]) # Developer Portal Team ID 
\ No newline at end of file
diff --git a/ios/fastlane/Fastfile b/ios/fastlane/Fastfile
new file mode 100644
index 0000000..d9b4e1d
--- /dev/null
+++ b/ios/fastlane/Fastfile
@@ -0,0 +1,127 @@
+default_platform(:ios)
+
+platform :ios do
+  desc "Build staging app and upload to TestFlight"
+  lane :build_staging do
+    setup_ci if ENV['CI']
+    
+    # Create a temporary keychain for CI
+    if ENV['CI']
+      create_keychain(
+        name: "ci_keychain",
+        password: ENV["IOS_KEYCHAIN_PASSWORD"],
+        default_keychain: true,
+        unlock: true,
+        timeout: 3600,
+        lock_when_sleeps: false
+      )
+      
+      import_certificate(
+        certificate_path: "~/certs/cert.p12",
+        certificate_password: ENV["MATCH_PASSWORD"],
+        keychain_name: "ci_keychain",
+        keychain_password: ENV["IOS_KEYCHAIN_PASSWORD"]
+      )
+      
+      install_provisioning_profile(path: "~/certs/profile.mobileprovision")
+    end
+    
+    # Update build number based on CI build number or timestamp
+    build_number = ENV['GITHUB_RUN_NUMBER'] || Time.now.to_i.to_s
+    increment_build_number(
+      build_number: build_number,
+      xcodeproj: "Runner.xcodeproj"
+    )
+    
+    # Build the app
+    gym(
+      scheme: "staging",
+      export_method: "app-store",
+      export_options: {
+        provisioningProfiles: {
+          ENV["STAGING_IOS_BUNDLE_ID"] => "Madwell Staging Profile"
+        }
+      },
+      configuration: "Release-staging",
+      output_directory: "build",
+      output_name: "Runner.ipa"
+    )
+    
+    # Upload to TestFlight if credentials available
+    if ENV["APP_STORE_CONNECT_API_KEY"]
+      app_store_connect_api_key(
+        key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
+        issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
+        key_content: ENV["APP_STORE_CONNECT_API_KEY"],
+      )
+      
+      upload_to_testflight(
+        skip_waiting_for_build_processing: true,
+        apple_id: ENV["APPLE_ID"],
+        app_identifier: ENV["STAGING_IOS_BUNDLE_ID"],
+        ipa: "build/Runner.ipa"
+      )
+    end
+  end
+  
+  desc "Build production app and upload to TestFlight"
+  lane :release do
+    setup_ci if ENV['CI']
+    
+    # Create a temporary keychain for CI
+    if ENV['CI']
+      create_keychain(
+        name: "ci_keychain",
+        password: ENV["IOS_KEYCHAIN_PASSWORD"],
+        default_keychain: true,
+        unlock: true,
+        timeout: 3600,
+        lock_when_sleeps: false
+      )
+      
+      import_certificate(
+        certificate_path: "~/certs/cert.p12",
+        certificate_password: ENV["MATCH_PASSWORD"],
+        keychain_name: "ci_keychain",
+        keychain_password: ENV["IOS_KEYCHAIN_PASSWORD"]
+      )
+      
+      install_provisioning_profile(path: "~/certs/profile.mobileprovision")
+    end
+    
+    # Update build number based on CI build number or timestamp
+    build_number = ENV['GITHUB_RUN_NUMBER'] || Time.now.to_i.to_s
+    increment_build_number(
+      build_number: build_number,
+      xcodeproj: "Runner.xcodeproj"
+    )
+    
+    # Build the app
+    gym(
+      scheme: "prod",
+      export_method: "app-store",
+      export_options: {
+        provisioningProfiles: {
+          "app.madwell.pro.customer" => "Madwell Production Profile"
+        }
+      },
+      configuration: "Release-prod",
+      output_directory: "build",
+      output_name: "Runner.ipa"
+    )
+    
+    # Upload to TestFlight 
+    app_store_connect_api_key(
+      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
+      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
+      key_content: ENV["APP_STORE_CONNECT_API_KEY"],
+    )
+    
+    upload_to_testflight(
+      skip_waiting_for_build_processing: true,
+      apple_id: ENV["APPLE_ID"],
+      app_identifier: "app.madwell.pro.customer",
+      ipa: "build/Runner.ipa"
+    )
+  end
+end 
\ No newline at end of file
diff --git a/lib/app/app.dart b/lib/app/app.dart
index 3456d38..450f402 100644
--- a/lib/app/app.dart
+++ b/lib/app/app.dart
@@ -1,5 +1,6 @@
 import 'package:e_demand/app/generalImports.dart';
-import "package:flutter/material.dart";
+import "package:flutter/material.dart"; 
+import 'package:e_demand/config/firebase_options_helper.dart';
 
 Future<void> initApp() async {
   //
@@ -15,7 +16,7 @@ Future<void> initApp() async {
 
   if (Firebase.apps.isNotEmpty) {
     await Firebase.initializeApp(
-      options: DefaultFirebaseOptions.currentPlatform,
+      options: CustomFirebaseOptions.currentPlatform,
     );
   } else {
     await Firebase.initializeApp();
diff --git a/lib/config/env_reader.dart b/lib/config/env_reader.dart
new file mode 100644
index 0000000..1f098b1
--- /dev/null
+++ b/lib/config/env_reader.dart
@@ -0,0 +1,137 @@
+import 'dart:io';
+import 'package:firebase_core/firebase_core.dart';
+import 'package:flutter/foundation.dart';
+import 'package:flutter_dotenv/flutter_dotenv.dart' as dotenv; 
+import 'package:e_demand/config/environment_config.dart';
+import 'package:e_demand/config/template_env_config.dart';
+import 'package:path_provider/path_provider.dart';
+
+class EnvReader {
+  // Initialize the environment
+  static Future<void> initialize() async {
+    // Determine which environment to use based on a compile-time flag or default to dev
+    const String envName = String.fromEnvironment('ENV', defaultValue: 'dev');
+    
+    debugPrint('Initializing environment: $envName');
+    
+    try {
+      // Try to load .env file if it exists
+      final bool envLoaded = await _loadEnvFile(envName);
+      
+      if (!envLoaded) {
+        debugPrint('Failed to load environment files. Using template config.');
+      }
+    
+       EnvironmentConfig.init(env: Environment.dev, config: _mergeWithEnvFile(templateEnvConfig));
+          
+    } catch (e) {
+      debugPrint('Error initializing environment: $e');
+      EnvironmentConfig.init(env: Environment.dev, config: templateEnvConfig); 
+    }
+    
+    debugPrint('Application running in ${EnvironmentConfig.envName} environment');
+  }
+  
+  // Load environment file based on environment name
+  static Future<bool> _loadEnvFile(String envName) async { 
+    
+    try { 
+      await dotenv.dotenv.load(fileName: '.env.$envName'); 
+      return true;
+    } catch (e) {
+      debugPrint('Could not load .env.$envName file: $e');
+      // If specific environment file doesn't exist, try loading the default one
+      try { 
+        await dotenv.dotenv.load(fileName: '.env'); 
+        return true;
+      } catch (e) {
+        debugPrint('Could not load .env file: $e');
+        return false;
+      }
+    }
+  }
+  
+  // Merge hardcoded config with values from .env file if they exist
+  static Map<String, dynamic> _mergeWithEnvFile(Map<String, dynamic> config) {
+    final Map<String, dynamic> result = Map.from(config);
+    
+    debugPrint('Env values loaded: ${dotenv.dotenv.env.keys.join(', ')}');
+    
+    // Replace values with those from .env file if they exist
+    if (dotenv.dotenv.env.isNotEmpty) {
+      // API Keys
+      if (dotenv.dotenv.env.containsKey('GOOGLE_MAPS_API_KEY')) {
+        result['googleMapsApiKey'] = dotenv.dotenv.env['GOOGLE_MAPS_API_KEY'];
+      }
+      
+      if (dotenv.dotenv.env.containsKey('ADMOB_APP_ID')) {
+        result['adMobAppId'] = dotenv.dotenv.env['ADMOB_APP_ID'];
+      }
+      
+      // App Configuration
+      if (dotenv.dotenv.env.containsKey('APP_NAME')) {
+        result['appName'] = dotenv.dotenv.env['APP_NAME'];
+      }
+      
+      if (dotenv.dotenv.env.containsKey('ANDROID_PACKAGE_NAME')) {
+        result['androidPackageName'] = dotenv.dotenv.env['ANDROID_PACKAGE_NAME'];
+      }
+      
+      if (dotenv.dotenv.env.containsKey('IOS_BUNDLE_ID')) {
+        result['iosBundleId'] = dotenv.dotenv.env['IOS_BUNDLE_ID'];
+      }
+      
+      if (dotenv.dotenv.env.containsKey('API_BASE_URL')) {
+        result['apiBaseUrl'] = dotenv.dotenv.env['API_BASE_URL'];
+        debugPrint('Setting apiBaseUrl from .env: ${result['apiBaseUrl']}');
+      }
+      
+      // Firebase Configuration
+      if (result.containsKey('firebaseConfig')) {
+        final Map<String, dynamic> firebaseConfig = Map.from(result['firebaseConfig'] as Map<String, dynamic>);
+        
+        // Android Firebase Config
+        if (firebaseConfig.containsKey('android') && 
+            dotenv.dotenv.env.containsKey('FIREBASE_ANDROID_API_KEY') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_ANDROID_APP_ID') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_ANDROID_PROJECT_ID') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_ANDROID_STORAGE_BUCKET') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_MESSAGING_SENDER_ID')) {
+          
+          firebaseConfig['android'] = FirebaseOptions(
+            apiKey: dotenv.dotenv.env['FIREBASE_ANDROID_API_KEY']!,
+            appId: dotenv.dotenv.env['FIREBASE_ANDROID_APP_ID']!,
+            messagingSenderId: dotenv.dotenv.env['FIREBASE_MESSAGING_SENDER_ID']!,
+            projectId: dotenv.dotenv.env['FIREBASE_ANDROID_PROJECT_ID']!,
+            storageBucket: dotenv.dotenv.env['FIREBASE_ANDROID_STORAGE_BUCKET'],
+          );
+        }
+        
+        // iOS Firebase Config
+        if (firebaseConfig.containsKey('ios') && 
+            dotenv.dotenv.env.containsKey('FIREBASE_IOS_API_KEY') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_IOS_APP_ID') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_IOS_PROJECT_ID') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_IOS_STORAGE_BUCKET') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_IOS_CLIENT_ID') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_IOS_BUNDLE_ID') &&
+            dotenv.dotenv.env.containsKey('FIREBASE_MESSAGING_SENDER_ID')) {
+          
+          firebaseConfig['ios'] = FirebaseOptions(
+            apiKey: dotenv.dotenv.env['FIREBASE_IOS_API_KEY']!,
+            appId: dotenv.dotenv.env['FIREBASE_IOS_APP_ID']!,
+            messagingSenderId: dotenv.dotenv.env['FIREBASE_MESSAGING_SENDER_ID']!,
+            projectId: dotenv.dotenv.env['FIREBASE_IOS_PROJECT_ID']!,
+            storageBucket: dotenv.dotenv.env['FIREBASE_IOS_STORAGE_BUCKET'],
+            iosClientId: dotenv.dotenv.env['FIREBASE_IOS_CLIENT_ID'],
+            iosBundleId: dotenv.dotenv.env['FIREBASE_IOS_BUNDLE_ID'],
+          );
+        }
+        
+        result['firebaseConfig'] = firebaseConfig;
+      }
+    }
+    
+    return result;
+  }
+} 
\ No newline at end of file
diff --git a/lib/config/environment_config.dart b/lib/config/environment_config.dart
new file mode 100644
index 0000000..b9bd066
--- /dev/null
+++ b/lib/config/environment_config.dart
@@ -0,0 +1,78 @@
+
+enum Environment {
+  dev,
+  staging,
+  prod,
+}
+
+class EnvironmentConfig {
+  static Environment _environment = Environment.dev;
+  static final Map<String, dynamic> _configMap = {};
+
+  // Initialize environment configuration
+  static void init({required Environment env, required Map<String, dynamic> config}) {
+    _environment = env;
+    _configMap.addAll(config);
+  }
+
+  // Get current environment
+  static Environment get environment => _environment;
+
+  // Get environment name
+  static String get envName => _environment.toString().split('.').last;
+
+  // Check if in development
+  static bool get isDev => _environment == Environment.dev;
+
+  // Check if in staging
+  static bool get isStaging => _environment == Environment.staging;
+
+  // Check if in production
+  static bool get isProd => _environment == Environment.prod;
+
+  // Get app name based on environment
+  static String get appName {
+    return _configMap['appName'] ?? 'Madwell';
+  }
+
+  // Get application ID for Android based on environment
+  static String get androidPackageName {
+    return _configMap['androidPackageName'] ?? 'app.madwell.pro.customer';
+  }
+
+  // Get bundle ID for iOS based on environment
+  static String get iosBundleId {
+    return _configMap['iosBundleId'] ?? 'app.madwell.pro.customer';
+  }
+
+  // Get Google Maps API Key
+  static String get googleMapsApiKey {
+    return _configMap['googleMapsApiKey'] ?? '';
+  }
+
+  // Get AdMob App ID
+  static String get adMobAppId {
+    return _configMap['adMobAppId'] ?? '';
+  }
+
+  // Get Firebase options
+  static Map<String, dynamic> get firebaseOptions {
+    return _configMap['firebaseOptions'] ?? {};
+  }
+
+  // Get API base URL
+  static String get apiBaseUrl {
+    return _configMap['apiBaseUrl'] ?? '';
+  }
+
+  // Generic method to get any config value
+  static T getValue<T>(String key, {T? defaultValue}) {
+    if (_configMap.containsKey(key)) {
+      return _configMap[key] as T;
+    }
+    if (defaultValue != null) {
+      return defaultValue;
+    }
+    throw Exception('Key $key not found in environment config');
+  }
+} 
\ No newline at end of file
diff --git a/lib/config/firebase_options_helper.dart b/lib/config/firebase_options_helper.dart
new file mode 100644
index 0000000..2cb0cd9
--- /dev/null
+++ b/lib/config/firebase_options_helper.dart
@@ -0,0 +1,32 @@
+import 'package:firebase_core/firebase_core.dart';
+import 'package:flutter/foundation.dart';
+import 'package:e_demand/config/environment_config.dart';
+
+class CustomFirebaseOptions {
+  static FirebaseOptions get currentPlatform {
+    if (kIsWeb) {
+      throw UnsupportedError('Unsupported platform');
+    }
+    
+    // Get the config based on the current platform
+    final firebaseConfig = EnvironmentConfig.getValue<Map<String, dynamic>>('firebaseConfig', defaultValue: {});
+    
+    if (defaultTargetPlatform == TargetPlatform.android) {
+      final androidConfig = firebaseConfig['android'];
+      if (androidConfig == null) {
+        throw Exception('Android Firebase configuration not found for the current environment');
+      }
+      return androidConfig as FirebaseOptions;
+    }
+    
+    if (defaultTargetPlatform == TargetPlatform.iOS) {
+      final iosConfig = firebaseConfig['ios'];
+      if (iosConfig == null) {
+        throw Exception('iOS Firebase configuration not found for the current environment');
+      }
+      return iosConfig as FirebaseOptions;
+    }
+    
+    throw UnsupportedError('Unsupported platform');
+  }
+} 
\ No newline at end of file
diff --git a/lib/config/template_env_config.dart b/lib/config/template_env_config.dart
new file mode 100644
index 0000000..5fc4cc9
--- /dev/null
+++ b/lib/config/template_env_config.dart
@@ -0,0 +1,29 @@
+import 'package:firebase_core/firebase_core.dart';
+
+// Template environment configuration
+final Map<String, dynamic> templateEnvConfig = {
+  'appName': '',
+  'androidPackageName': '',
+  'iosBundleId': '',
+  'googleMapsApiKey': '', // Load from .env file
+  'adMobAppId': '', // Load from .env file
+  'apiBaseUrl': '',
+  'firebaseConfig': {
+    'android': const FirebaseOptions(
+      apiKey: '', // Load from .env file
+      appId: '', // Load from .env file
+      messagingSenderId: '', // Load from .env file
+      projectId: '', // Load from .env file
+      storageBucket: '', // Load from .env file
+    ),
+    'ios': const FirebaseOptions(
+      apiKey: '', // Load from .env file
+      appId: '', // Load from .env file
+      messagingSenderId: '', // Load from .env file
+      projectId: '', // Load from .env file
+      storageBucket: '', // Load from .env file
+      iosClientId: '', // Load from .env file
+      iosBundleId: '',
+    ),
+  },
+}; 
\ No newline at end of file
diff --git a/lib/firebase_options.dart b/lib/firebase_options.dart
index 53e9de1..5e92a5c 100644
--- a/lib/firebase_options.dart
+++ b/lib/firebase_options.dart
@@ -55,7 +55,7 @@ class DefaultFirebaseOptions {
     projectId: 'madwell-staging-eb57e',
     storageBucket: 'madwell-staging-eb57e.firebasestorage.app',
     iosClientId: '213795493196-e0h1m93sob8d6417ii56n1vrvd84dnv9.apps.googleusercontent.com',
-    iosBundleId: 'wrteam.edemand.customer.eDemand',
+    iosBundleId: 'app.madwell.pro.customer',
   );
 
   static const FirebaseOptions web = FirebaseOptions(
diff --git a/lib/main.dart b/lib/main.dart
index f5b39b4..d3ca02a 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,3 +1,10 @@
 import 'package:e_demand/app/app.dart';
+import 'package:e_demand/config/env_reader.dart';
 
-void main() => initApp();
+void main() async {
+  // Initialize environment configuration
+  await EnvReader.initialize();
+
+  // Initialize app
+  initApp();
+}
diff --git a/lib/ui/screens/loginScreen.dart b/lib/ui/screens/loginScreen.dart
index 3beb83e..823ff08 100644
--- a/lib/ui/screens/loginScreen.dart
+++ b/lib/ui/screens/loginScreen.dart
@@ -113,7 +113,7 @@ class _LogInScreenState extends State<LogInScreen> {
             color: Theme.of(context).colorScheme.blackColor,
             fontWeight: FontWeight.w600,
             fontStyle: FontStyle.normal,
-            fontSize: 28,
+            fontSize: 24,
             textAlign: TextAlign.center,
           ),
           CustomText(
@@ -121,7 +121,7 @@ class _LogInScreenState extends State<LogInScreen> {
             color: Theme.of(context).colorScheme.accentColor,
             fontWeight: FontWeight.w600,
             fontStyle: FontStyle.normal,
-            fontSize: 28,
+            fontSize: 24,
             textAlign: TextAlign.center,
           ),
         ],
@@ -306,7 +306,7 @@ class _LogInScreenState extends State<LogInScreen> {
                     ),
                   ),
                   Positioned.directional(
-                      top: 55,
+                      top: 75,
                       end: 15,
                       textDirection: Directionality.of(context),
                       child: BlocBuilder<VerifyOtpCubit, VerifyOtpState>(
diff --git a/lib/utils/api.dart b/lib/utils/api.dart
index 8a7c814..3ccb93e 100644
--- a/lib/utils/api.dart
+++ b/lib/utils/api.dart
@@ -73,9 +73,9 @@ class Api {
   static String customJobBidders = "${baseUrl}fetch_custom_job_bidders";
   static String cancelCustomJobRequest = "${baseUrl}cancle_custom_job_request";
   //chat related APIs
-  static const String sendChatMessage = "${baseUrl}send_chat_message";
-  static const String getChatMessages = "${baseUrl}get_chat_history";
-  static const String getChatUsers = "${baseUrl}get_chat_providers_list";
+  static String sendChatMessage = "${baseUrl}send_chat_message";
+  static String getChatMessages = "${baseUrl}get_chat_history";
+  static String getChatUsers = "${baseUrl}get_chat_providers_list";
 
   ///API parameter
   static const String limit = "limit";
diff --git a/lib/utils/constant.dart b/lib/utils/constant.dart
index fcdfa9f..8465c6e 100644
--- a/lib/utils/constant.dart
+++ b/lib/utils/constant.dart
@@ -1,12 +1,13 @@
 import 'package:e_demand/app/generalImports.dart';
+import 'package:e_demand/config/environment_config.dart';
 
 const String appName = "madwell";
 
 // domainURL should look like:- your_web_domain or your_panel_domain
 const String domain = 'app.madwell.pro'; 
 
-//Add your baseURL
-const String baseUrl = "https://admin.staging.madwell.pro/api/v1/"; 
+//Add your baseURL - This will be overridden by environment config
+String baseUrl = EnvironmentConfig.apiBaseUrl; 
 
 const bool isDemoMode = false;
 
@@ -17,7 +18,7 @@ const String defaultLanguageName = "Francais";
 
 //add your default country code here
 ///https://www.att.com/support_media/images/pdf/Country_Code_List.pdf
-String defaultCountryCode = "cm";
+String defaultCountryCode = "CM";
 
 //if you do not want user to select another country rather than default country,
 //then make below variable true
diff --git a/lib/utils/env_display_widget.dart b/lib/utils/env_display_widget.dart
new file mode 100644
index 0000000..82127c8
--- /dev/null
+++ b/lib/utils/env_display_widget.dart
@@ -0,0 +1,84 @@
+import 'package:flutter/material.dart';
+import 'package:e_demand/config/environment_config.dart';
+import 'package:package_info_plus/package_info_plus.dart';
+
+class EnvDisplayWidget extends StatelessWidget {
+  const EnvDisplayWidget({Key? key}) : super(key: key);
+
+  @override
+  Widget build(BuildContext context) {
+    return Material(
+      color: Colors.transparent,
+      child: Container(
+        margin: const EdgeInsets.all(16),
+        padding: const EdgeInsets.all(16),
+        decoration: BoxDecoration(
+          color: _getEnvColor().withAlpha(25),
+          borderRadius: BorderRadius.circular(8),
+          border: Border.all(color: _getEnvColor()),
+        ),
+        child: FutureBuilder<PackageInfo>(
+          future: PackageInfo.fromPlatform(),
+          builder: (context, snapshot) {
+            if (!snapshot.hasData) {
+              return const CircularProgressIndicator();
+            }
+
+            final packageInfo = snapshot.data!;
+            
+            return Column(
+              mainAxisSize: MainAxisSize.min,
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                Text(
+                  'Environment: ${EnvironmentConfig.envName.toUpperCase()}',
+                  style: TextStyle(
+                    fontWeight: FontWeight.bold,
+                    color: _getEnvColor(),
+                    fontSize: 16,
+                  ),
+                ),
+                const SizedBox(height: 8),
+                _buildInfoRow('App Name', EnvironmentConfig.appName),
+                _buildInfoRow('Package Name', packageInfo.packageName),
+                _buildInfoRow('Version', '${packageInfo.version}+${packageInfo.buildNumber}'),
+                _buildInfoRow('API URL', EnvironmentConfig.apiBaseUrl),
+              ],
+            );
+          },
+        ),
+      ),
+    );
+  }
+
+  Widget _buildInfoRow(String label, String value) {
+    return Padding(
+      padding: const EdgeInsets.only(bottom: 4.0),
+      child: Row(
+        children: [
+          Text(
+            '$label: ',
+            style: const TextStyle(fontWeight: FontWeight.w600),
+          ),
+          Expanded(
+            child: Text(
+              value,
+              style: const TextStyle(fontWeight: FontWeight.normal),
+              overflow: TextOverflow.ellipsis,
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+
+  Color _getEnvColor() {
+    if (EnvironmentConfig.isDev) {
+      return Colors.blue;
+    } else if (EnvironmentConfig.isStaging) {
+      return Colors.orange;
+    } else {
+      return Colors.green;
+    }
+  }
+} 
\ No newline at end of file
diff --git a/lib/utils/environment_checker.dart b/lib/utils/environment_checker.dart
new file mode 100644
index 0000000..a5b6eb3
--- /dev/null
+++ b/lib/utils/environment_checker.dart
@@ -0,0 +1,90 @@
+import 'dart:math' show min;
+import 'package:e_demand/config/environment_config.dart';
+import 'package:flutter/material.dart';
+import 'package:package_info_plus/package_info_plus.dart';
+
+class EnvironmentChecker {
+  static Future<Map<String, String>> getEnvironmentInfo() async {
+    final Map<String, String> info = {};
+    
+    // Get basic environment information
+    info['Environment'] = EnvironmentConfig.envName;
+    info['App Name'] = EnvironmentConfig.appName;
+    info['API Base URL'] = EnvironmentConfig.apiBaseUrl;
+    
+    try {
+      // Get package information
+      final PackageInfo packageInfo = await PackageInfo.fromPlatform();
+      info['Package Name'] = packageInfo.packageName;
+      info['App Version'] = '${packageInfo.version}+${packageInfo.buildNumber}';
+    } catch (e) {
+      info['Package Info Error'] = e.toString();
+    }
+    
+    // Add Firebase project details
+    final firebaseConfig = EnvironmentConfig.firebaseOptions;
+    if (firebaseConfig.containsKey('android')) {
+      info['Firebase Project ID (Android)'] = 
+          firebaseConfig['android'].projectId ?? 'Unknown';
+    }
+    
+    if (firebaseConfig.containsKey('ios')) {
+      info['Firebase Project ID (iOS)'] = 
+          firebaseConfig['ios'].projectId ?? 'Unknown';
+    }
+    
+    // Add Google Maps API key (first 8 chars for security)
+    final googleMapsKey = EnvironmentConfig.googleMapsApiKey;
+    if (googleMapsKey.isNotEmpty) {
+      info['Google Maps API Key'] = '${googleMapsKey.substring(0, min(8, googleMapsKey.length))}...';
+    } else {
+      info['Google Maps API Key'] = 'Not configured';
+    }
+    
+    return info;
+  }
+  
+  // Show an info dialog with environment details
+  static Future<void> showEnvironmentInfoDialog(BuildContext context) async {
+    final info = await getEnvironmentInfo();
+    
+    if (context.mounted) {
+      showDialog(
+        context: context,
+        builder: (context) => AlertDialog(
+          title: Text('Environment: ${EnvironmentConfig.envName.toUpperCase()}'),
+          content: SingleChildScrollView(
+            child: Column(
+              mainAxisSize: MainAxisSize.min,
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: info.entries.map((entry) => 
+                Padding(
+                  padding: const EdgeInsets.symmetric(vertical: 4.0),
+                  child: Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    children: [
+                      Text(
+                        entry.key,
+                        style: const TextStyle(
+                          fontWeight: FontWeight.bold,
+                        ),
+                      ),
+                      Text(entry.value),
+                      const Divider(),
+                    ],
+                  ),
+                ),
+              ).toList(),
+            ),
+          ),
+          actions: [
+            TextButton(
+              onPressed: () => Navigator.of(context).pop(),
+              child: const Text('OK'),
+            ),
+          ],
+        ),
+      );
+    }
+  }
+} 
\ No newline at end of file
diff --git a/lib/utils/stringExtension.dart b/lib/utils/stringExtension.dart
index 0fcab5d..0c5473e 100644
--- a/lib/utils/stringExtension.dart
+++ b/lib/utils/stringExtension.dart
@@ -122,7 +122,7 @@ extension StringExtension on String {
         'cur',
       ].contains(toLowerCase().split('.').lastOrNull ?? "");
 
-    toInt() {
+    Object? toInt() {
     if (isEmpty) return this;
     return int.tryParse(this);
   }
diff --git a/pubspec.yaml b/pubspec.yaml
index d7cdbb0..e7cd06e 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -51,7 +51,7 @@ dependencies:
   package_info_plus: ^8.0.2
   external_path: ^2.0.1
   open_filex: ^4.3.2
-  path_provider: ^2.0.11
+  path_provider: ^2.1.5
   webview_flutter: ^4.0.7
   change_app_package_name: ^1.1.0
   vibration: ^3.1.3
@@ -75,6 +75,7 @@ dependencies:
   device_info_plus: ^11.1.1
   toastification: ^3.0.2
   firebase_analytics: ^11.4.2
+  flutter_dotenv: ^5.1.0
 
 
 dependency_overrides:
@@ -84,6 +85,7 @@ dependency_overrides:
 dev_dependencies:
   flutter_test:
     sdk: flutter
+  flutter_launcher_icons: ^0.13.1
 
 flutter:
   uses-material-design: true
@@ -100,6 +102,7 @@ flutter:
     - assets/mapTheme/
     - assets/animation/
     - assets/countryCodes/
+    - .env
 
   fonts:
     - family: Lexend
diff --git a/setup_env.sh b/setup_env.sh
new file mode 100755
index 0000000..d5d4ae6
--- /dev/null
+++ b/setup_env.sh
@@ -0,0 +1,71 @@
+#!/bin/bash
+
+# Function to display a header
+function display_header() {
+  echo "======================================"
+  echo "$1"
+  echo "======================================"
+}
+
+# Function to copy environment file
+function copy_env_file() {
+  ENV=$1
+  
+  if [ -f ".env.$ENV" ]; then
+    echo "Environment file .env.$ENV already exists."
+  else
+    echo "Creating .env.$ENV file..."
+    cp -f .env_examples/env.$ENV .env
+    echo "Created .env.$ENV file."
+  fi
+}
+
+# Main script
+display_header "Madwell Environment Setup Script"
+
+echo "This script will setup the environment for Madwell app."
+echo ""
+echo "1. Development environment"
+echo "2. Staging environment"
+echo "3. Production environment"
+echo "4. Setup all environments"
+echo "5. Exit"
+echo ""
+
+read -p "Select an option (1-5): " choice
+
+case $choice in
+  1)
+    display_header "Setting up Development environment"
+    copy_env_file "dev"
+    echo "Running development environment..."
+    flutter run --flavor dev --dart-define=ENV=dev
+    ;;
+  2)
+    display_header "Setting up Staging environment"
+    copy_env_file "staging"
+    echo "Running staging environment..."
+    flutter run --flavor staging --dart-define=ENV=staging
+    ;;
+  3)
+    display_header "Setting up Production environment"
+    copy_env_file "prod"
+    echo "Running production environment..."
+    flutter run --flavor prod --dart-define=ENV=prod
+    ;;
+  4)
+    display_header "Setting up all environments"
+    copy_env_file "dev"
+    copy_env_file "staging"
+    copy_env_file "prod"
+    echo "All environment files created."
+    ;;
+  5)
+    display_header "Exiting"
+    exit 0
+    ;;
+  *)
+    echo "Invalid choice. Exiting."
+    exit 1
+    ;;
+esac 
\ No newline at end of file
diff --git a/test_environment.sh b/test_environment.sh
new file mode 100755
index 0000000..058e99c
--- /dev/null
+++ b/test_environment.sh
@@ -0,0 +1,54 @@
+#!/bin/bash
+
+# Test environment configuration script
+
+# Function to display a header
+function display_header() {
+  echo "======================================"
+  echo "$1"
+  echo "======================================"
+}
+
+# Function to run flutter in a specific environment
+function run_env_test() {
+  ENV=$1
+  display_header "Testing $ENV environment"
+  
+  # Run the app with the specified environment
+  echo "Running: flutter run --dart-define=ENV=$ENV --flavor $ENV"
+  flutter run --dart-define=ENV=$ENV --flavor $ENV
+}
+
+# Main script
+display_header "Madwell Environment Test Script"
+
+echo "This script will test the environment configuration for Madwell app."
+echo "Make sure you have created the .env files in the project root."
+echo ""
+echo "1. Development"
+echo "2. Staging"
+echo "3. Production"
+echo "4. Exit"
+echo ""
+
+read -p "Select an environment to test (1-4): " choice
+
+case $choice in
+  1)
+    run_env_test "dev"
+    ;;
+  2)
+    run_env_test "staging"
+    ;;
+  3)
+    run_env_test "prod"
+    ;;
+  4)
+    display_header "Exiting"
+    exit 0
+    ;;
+  *)
+    echo "Invalid choice. Exiting."
+    exit 1
+    ;;
+esac 
\ No newline at end of file
